---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import { getSitePages } from '../lib/api/hubspot';
import { checkAuth } from '../lib/middleware/auth';
import cache, { CacheType } from '../lib/utils/cache';
import type { HubSpotPage } from '@/types/hubspot';
import type { SectionKey } from '@/types/page';
import { buildPageTree } from '../utils/page-helpers';
import DomainModal from '../components/DomainModal.astro';
import TemplateModal from '../components/TemplateModal.astro';
import SlugModal from '../components/SlugModal.astro';
import { getPageStatus } from '../utils/page-helpers';
import { formatDate } from '../lib/utils/date';

const { accessToken, refreshToken, isAuthenticated } = await checkAuth(Astro.cookies);
const portalId = Astro.cookies.get('hubspot_portal_id')?.value;
const cacheEnabled = Astro.cookies.get('cache-enabled')?.boolean() ?? false;

if (!isAuthenticated) {
  return Astro.redirect('/?error=missing_credentials');
}

let pages: HubSpotPage[] = [];
let error = '';

const isArchived = Astro.url.searchParams.has('archived');
const groupPages = new URLSearchParams(Astro.url.search).get('group') !== 'false';
const sections = (groupPages ? ['published', 'draft', 'archived'] : ['all', 'archived']) as SectionKey[];

try {
  if (cacheEnabled) {
    pages = cache.get(CacheType.PAGES, accessToken as string, { archived: isArchived }) || [];
  }

  if (pages.length === 0) {
    pages = await getSitePages(accessToken as string, isArchived, refreshToken);
    if (cacheEnabled) {
      cache.set(CacheType.PAGES, accessToken as string, pages, { archived: isArchived });
    }
  }
} catch (err) {
  console.error('Error fetching pages:', err);
  error = `Failed to fetch pages: ${err instanceof Error ? err.message : 'Unknown error'}`;
}

const pageTree = buildPageTree(pages, groupPages);
---

<Layout title="HubSpot Site Pages">
  <meta name="access-token" content={accessToken} />
  <pages-data data-pages={JSON.stringify(pages)}></pages-data>
  <main class="container mx-auto max-w-4xl px-4 py-8">
    <h1 class="text-4xl font-bold mb-4 text-blue-200">
      HubSpot Site Pages <span class="text-xl text-blue-500">({pages.length} pages)</span>
    </h1>

    <a
      href={isArchived ? "/pages" : "/pages?archived=true"}
      class="text-blue-400 hover:text-blue-300 mb-8 block"
    >
      {isArchived ? 'Hide archived pages' : 'Show archived pages'}
    </a>

    {error && <p class="text-red-500 mb-6 p-4 bg-red-100 rounded-lg">{error}</p>}

    <div class="page-tree-container">
      <div class="flex space-x-4 mb-4">
        <button
          id="changeSelectedBtn"
          class="change-selected-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Change Selected Template
        </button>
        <button
          id="changeSelectedDomainsBtn"
          class="changeSelectedDomainsBtn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Change Selected Domains
        </button>
        <button
          id="changeSelectedSlugsBtn"
          class="changeSelectedSlugsBtn bg-yellow-600 hover:bg-yellow-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Change Selected Slugs
        </button>
      </div>

      {sections.map(section => (
        (section !== 'archived' || isArchived) && (
          <div>
            <h2 class="text-3xl font-bold mb-6 mt-8 capitalize text-blue-200">
              {section === 'all' ? 'All Pages' : `${section} Pages`}
            </h2>
            <ul class="space-y-3">
              {pageTree[section] && Object.entries(pageTree[section]!).map(([folder, templates]) => (
                <li class="folder-group">
                  <details class="bg-gray-800 rounded-lg p-4">
                    <summary class="flex items-center cursor-pointer">
                      <span class="mr-2 text-xl">üìÅ</span>
                      <span class="text-xl font-semibold text-white">{folder}</span>
                    </summary>
                    <ul class="mt-4 space-y-4">
                      {Object.entries(templates).map(([templatePath, templatePages]) => (
                        <li class="template-group">
                          <details class="bg-gray-700 rounded-lg p-4">
                            <summary class="flex items-center justify-between cursor-pointer">
                              <div class="flex items-center">
                                <input
                                  type="checkbox"
                                  class="template-checkbox custom-checkbox mr-2"
                                  data-template-path={`${folder}/${templatePath}`}
                                />
                                <span class="text-lg font-semibold text-white">{templatePath}</span>
                              </div>
                            </summary>
                            <ul class="mt-4 space-y-4">
                                {templatePages.map(page => {
                                    const status = getPageStatus(page);
                                    return (
                                        <li class="page bg-gray-600 rounded-lg p-4">
                                        <div class="flex items-center justify-between">
                                            <div class="flex-grow">
                                            <div class="flex items-center">
                                                <label class="flex items-center cursor-pointer">
                                                <input
                                                    type="checkbox"
                                                    class="page-checkbox custom-checkbox mr-2"
                                                    data-page-id={page.id}
                                                    data-template-path={page.templatePath}
                                                    data-current-url={page.absolute_url}
                                                />
                                                <h3 class="text-2xl font-semibold text-blue-400">
                                                    {page.name}
                                                </h3>
                                                </label>
                                            </div>
                                            <div class="mt-2 text-sm flex flex-col space-y-1 text-gray-300">
                                                <p>URL: {page.absolute_url}</p>
                                                <p>Status: <span class={status.className}>{status.label}</span></p>
                                                <p>Created: {formatDate(page.createdAt)}</p>
                                                <p>Updated: {formatDate(page.updatedAt)}</p>
                                                {page.archivedAt && !page.archivedAt.includes('1970') &&
                                                <p>Archived At: {formatDate(page.archivedAt)}</p>
                                                }
                                            </div>
                                            </div>
                                            <div class="flex flex-col space-y-2 min-w-[150px] ml-12 text-right justify-end">
                                            <button
                                                class="change-template-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                                data-page-id={page.id}
                                                data-template-path={page.templatePath}
                                            >
                                                Change Template
                                            </button>
                                            <button
                                                class="change-domain-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                                data-page-id={page.id}
                                            >
                                                Change Domain
                                            </button>
                                            <button
                                                class="change-slug-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                                data-page-id={page.id}
                                                data-current-url={page.absolute_url}
                                            >
                                                Change Slug
                                            </button>
                                            <a
                                                href={page.absolute_url}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                class="view-live-page-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                            >
                                                View Live Page
                                            </a>
                                            <a
                                                href={`https://app.hubspot.com/pages/${portalId}/editor/${page.id}`}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                class="edit-in-hubspot-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                            >
                                                Edit in HubSpot
                                            </a>
                                            {page.archived && (
                                                <button
                                                class="restore-page-btn text-right text-sm text-blue-400 hover:text-blue-300"
                                                data-page-id={page.id}
                                                >
                                                Restore Page
                                                </button>
                                            )}
                                            </div>
                                        </div>
                                        </li>
                                    );
                                    })}
                            </ul>
                          </details>
                        </li>
                      ))}
                    </ul>
                  </details>
                </li>
              ))}
            </ul>
          </div>
        )
      ))}
    </div>

    <a href="/" class="inline-block mt-8 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">
      Back to Home
    </a>
  </main>

  <TemplateModal />
  <DomainModal />
  <SlugModal />
</Layout>

<style>
  .custom-checkbox {
    appearance: none;
    -webkit-appearance: none;
    width: 1.5rem;
    height: 1.5rem;
    border: 2px solid #4a5568;
    border-radius: 0.25rem;
    background-color: #2d3748;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    margin-right: 0.5rem;
    transition: all 0.2s ease-in-out;
  }

  .custom-checkbox:checked {
    background-color: #553c9a;
    border-color: #9f7aea;
  }

  .custom-checkbox:checked::after {
    content: '\2714';
    color: white;
    font-size: 14px;
    font-weight: bold;
  }

  .custom-checkbox:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
  }

  .custom-checkbox:hover {
    border-color: #4299e1;
  }
</style>

<script>
  import type { HubSpotPage } from '../types/hubspot';
  import { CacheType } from '../lib/utils/cache';

  document.addEventListener('DOMContentLoaded', () => {
    const pagesData = document.querySelector('pages-data')?.dataset.pages;
    const pages: HubSpotPage[] = pagesData ? JSON.parse(pagesData) : [];

    const urlParams = new URLSearchParams(window.location.search);
    const isArchived = urlParams.has('archived');

    const templateCheckboxes = document.querySelectorAll<HTMLInputElement>('.template-checkbox');
    const pageCheckboxes = document.querySelectorAll<HTMLInputElement>('.page-checkbox');
    const changeSelectedBtn = document.getElementById('changeSelectedBtn') as HTMLButtonElement;
    const changeSelectedDomainsBtn = document.getElementById('changeSelectedDomainsBtn') as HTMLButtonElement;
    const changeSelectedSlugsBtn = document.getElementById('changeSelectedSlugsBtn') as HTMLButtonElement;

    function updateButtonStates() {
      const anyChecked = Array.from(pageCheckboxes).some(checkbox => checkbox.checked);
      if (changeSelectedBtn) changeSelectedBtn.disabled = !anyChecked;
      if (changeSelectedDomainsBtn) changeSelectedDomainsBtn.disabled = !anyChecked;
      if (changeSelectedSlugsBtn) changeSelectedSlugsBtn.disabled = !anyChecked;
    }

    async function updatePagesInCache(pageIds: string[], updates: Partial<HubSpotPage>) {
      try {
        const accessToken = document.querySelector('meta[name="access-token"]')?.getAttribute('content');
        if (!accessToken) return;

        console.log('Sending cache update request:', {
          type: CacheType.PAGES,
          pageIds,
          updates,
          options: { archived: isArchived }
        });

        const response = await fetch('/api/cache/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            type: CacheType.PAGES,
            pageIds,
            updates,
            options: { archived: isArchived }
          })
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to update cache');
        }

        const result = await response.json();
        console.log('Cache update response:', result);
      } catch (error) {
        console.error('Failed to update cache:', error);
      }
    }

    async function handleTemplateChange(pageIds: string | string[], newTemplatePath: string) {
      try {
        const ids = Array.isArray(pageIds) ? pageIds : [pageIds];

        const response = await fetch('/api/pages/update-batch', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            inputs: ids.map(id => ({
              id,
              templatePath: newTemplatePath
            }))
          })
        });

        if (!response.ok) throw new Error('Failed to update template');

        await updatePagesInCache(ids, { templatePath: newTemplatePath });
        window.location.reload();
      } catch (error) {
        console.error('Error updating template:', error);
        alert('Failed to update template: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    }

    async function handleDomainChange(pageIds: string | string[], newDomain: string) {
      try {
        const ids = Array.isArray(pageIds) ? pageIds : [pageIds];
        const pagesData = document.querySelector('pages-data')?.dataset.pages;
        const pages: HubSpotPage[] = pagesData ? JSON.parse(pagesData) : [];

        for (const pageId of ids) {
          console.log('Updating domain for page:', { pageId, newDomain });

          const response = await fetch('/api/domains/change', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              pageId,
              domain: newDomain
            })
          });

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`Failed to update domain for page ${pageId}: ${errorData.error || response.statusText}`);
          }

          // Get the page to update its URL in cache
          const page = pages.find(p => p.id === pageId);
          if (page) {
            const currentUrl = new URL(page.absolute_url);
            const newUrl = `https://${newDomain}${currentUrl.pathname}`;
            await updatePagesInCache([pageId], { absolute_url: newUrl });
          }
        }

        window.location.reload();
      } catch (error) {
        console.error('Error updating domain:', error);
        alert('Failed to update domain: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    }

    async function handleSlugChange(pages: Array<{ pageId: string; currentUrl: string }>, pattern: string) {
      try {
        const patternMatch = pattern.match(/#(.+?)#(.*)/);
        if (!patternMatch) {
          throw new Error('Invalid pattern format. Pattern should be in format: #regex#replacement');
        }

        const [, regexPattern, replacement] = patternMatch;

        try {
          new RegExp(regexPattern);
        } catch (e) {
          throw new Error('Invalid regular expression pattern');
        }

        const regex = new RegExp(regexPattern);
        const updates: Array<{ pageId: string; newSlug: string }> = [];

        for (const page of pages) {
          try {
            const url = new URL(page.currentUrl);
            const currentPath = url.pathname;
            const newPath = currentPath.replace(regex, replacement)
              .replace(/\/+/g, '/')
              .replace(/\/$/, '')
              .replace(/^(?!\/)/, '/');

            const newUrl = `${url.protocol}//${url.host}${newPath}`;

            const response = await fetch('/api/pages/update-slug', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ pageId: page.pageId, newSlug: newPath })
            });

            if (!response.ok) {
              const errorData = await response.json().catch(() => ({}));
              throw new Error(`Failed to update slug for page ${page.pageId}: ${errorData.message || response.statusText}`);
            }

            updates.push({ pageId: page.pageId, newSlug: newUrl });
          } catch (error) {
            console.error(`Error processing URL for page ${page.pageId}:`, error);
            throw error;
          }
        }

        for (const update of updates) {
          await updatePagesInCache([update.pageId], { absolute_url: update.newSlug });
        }

        window.location.reload();
      } catch (error) {
        console.error('Error updating slugs:', error);
        alert('Failed to update slugs: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    }

    async function handleRestorePage(pageId: string) {
      try {
        const response = await fetch('/api/pages/restore', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pageId })
        });

        if (!response.ok) throw new Error('Failed to restore page');

        await updatePagesInCache([pageId], { archived: false });
        window.location.reload();
      } catch (error) {
        console.error('Error restoring page:', error);
        alert('Failed to restore page: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    }

    changeSelectedBtn?.addEventListener('click', async () => {
      const checkedPages = Array.from(pageCheckboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => ({
          id: checkbox.dataset.pageId,
          templatePath: checkbox.dataset.templatePath
        }))
        .filter((page): page is { id: string; templatePath: string } =>
          page.id != null && page.templatePath != null);

      if (window.openTemplateModal && checkedPages.length > 0) {
        const pageIds = checkedPages.map(page => page.id);
        const templatePath = checkedPages[0].templatePath;
        const newTemplatePath = await window.openTemplateModal(pageIds, templatePath);

        if (newTemplatePath) {
          await handleTemplateChange(pageIds, newTemplatePath);
        }
      }
    });

    changeSelectedDomainsBtn?.addEventListener('click', async () => {
      const checkedPages = Array.from(pageCheckboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.dataset.pageId)
        .filter((id): id is string => id != null);

      if (window.openDomainModal && checkedPages.length > 0) {
        const newDomain = await window.openDomainModal(checkedPages[0]);
        if (newDomain) {
          await handleDomainChange(checkedPages, newDomain);
        }
      }
    });

    changeSelectedSlugsBtn?.addEventListener('click', async () => {
      const checkedPages = Array.from(pageCheckboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => ({
          pageId: checkbox.dataset.pageId,
          currentUrl: checkbox.dataset.currentUrl
        }))
        .filter((page): page is { pageId: string; currentUrl: string } =>
          page.pageId != null && page.currentUrl != null);

      if (window.openSlugModal && checkedPages.length > 0) {
        const pattern = await window.openSlugModal(checkedPages);
        if (pattern) {
          await handleSlugChange(checkedPages, pattern);
        }
      }
    });

    document.querySelectorAll('.change-template-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const button = e.currentTarget as HTMLButtonElement;
        const pageId = button.dataset.pageId;
        const templatePath = button.dataset.templatePath;

        if (pageId && templatePath && window.openTemplateModal) {
          const newTemplatePath = await window.openTemplateModal(pageId, templatePath);
          if (newTemplatePath) {
            await handleTemplateChange(pageId, newTemplatePath);
          }
        }
      });
    });

    document.querySelectorAll('.change-domain-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const button = e.currentTarget as HTMLButtonElement;
        const pageId = button.dataset.pageId;

        if (pageId && window.openDomainModal) {
          const newDomain = await window.openDomainModal(pageId);
          if (newDomain) {
            await handleDomainChange(pageId, newDomain);
          }
        }
      });
    });

    document.querySelectorAll('.change-slug-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const button = e.currentTarget as HTMLButtonElement;
        const pageId = button.dataset.pageId;
        const currentUrl = button.dataset.currentUrl;

        if (!pageId || !currentUrl) {
          console.error('Missing required data attributes');
          return;
        }

        if (window.openSlugModal) {
          try {
            const pattern = await window.openSlugModal([{ pageId, currentUrl }]);
            if (pattern) {
              await handleSlugChange([{ pageId, currentUrl }], pattern);
            }
          } catch (error) {
            console.error('Error in slug change process:', error);
            alert('Failed to change slug: ' + (error instanceof Error ? error.message : 'Unknown error'));
          }
        }
      });
    });

    templateCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const templateCheckbox = e.target as HTMLInputElement;
        const templateDetails = templateCheckbox.closest('details');
        if (!templateDetails) return;

        const pageCheckboxes = templateDetails.querySelectorAll<HTMLInputElement>('.page-checkbox');
        pageCheckboxes.forEach(checkbox => {
          checkbox.checked = templateCheckbox.checked;
        });
        updateButtonStates();
      });
    });

    pageCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const pageCheckbox = e.target as HTMLInputElement;
        const templateDetails = pageCheckbox.closest('details');
        if (!templateDetails) return;

        const templateCheckbox = templateDetails.querySelector<HTMLInputElement>('.template-checkbox');
        const pageCheckboxes = templateDetails.querySelectorAll<HTMLInputElement>('.page-checkbox');

        const allChecked = Array.from(pageCheckboxes).every(checkbox => checkbox.checked);

        if (templateCheckbox) {
          templateCheckbox.checked = allChecked;
        }

        updateButtonStates();
      });
    });

    updateButtonStates();

    document.querySelectorAll('.restore-page-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const button = e.currentTarget as HTMLButtonElement;
        const pageId = button.dataset.pageId;

        if (pageId) {
          await handleRestorePage(pageId);
        }
      });
    });
  });
</script>