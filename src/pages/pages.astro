---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import PageTree from '../components/PageTree.astro';
import TemplateModal from '../components/TemplateModal.astro';
import { getSitePages, getDomains } from '../lib/hubspot/api';
import DomainModal from '../components/DomainModal.astro';

let pages = [];
let error = '';

const accessTokenCookie = Astro.cookies.get('hubspot_access_token');
const accessToken = accessTokenCookie ? accessTokenCookie.value : null;

const portalIdCookie = Astro.cookies.get('hubspot_portal_id');
const portalId = portalIdCookie ? portalIdCookie.value : null;

if (!accessToken || !portalId) {
    return Astro.redirect('/?error=missing_credentials');
}

try {
    pages = await getSitePages(accessToken, Astro.url.searchParams.has('archived'));
    // Improved sorting function
    pages.sort((a, b) => {
        const statusOrder = { PUBLISHED: 0, DRAFT: 1, ARCHIVED: 2 };
        const aStatus = a.archived ? 'ARCHIVED' : (a.state || 'DRAFT');
        const bStatus = b.archived ? 'ARCHIVED' : (b.state || 'DRAFT');
        return statusOrder[aStatus] - statusOrder[bStatus] ||
               ((a.name || '').localeCompare(b.name || ''));
    });
} catch (err) {
    console.error('Error fetching pages:', err);
    error = `Failed to fetch pages: ${err instanceof Error ? err.message : 'Unknown error'}`;
}

function getStatusLabel(page) {
    if (page.archivedAt && !page.archivedAt.includes('1970')) return 'Archived';
    switch (page.state || 'DRAFT') {
        case 'PUBLISHED': return 'Published';
        case 'DRAFT': return 'Draft';
        case 'SCHEDULED': return 'Scheduled';
        case 'PUBLISHED_OR_SCHEDULED': return 'Published';
        default: return page.state || 'Draft';
    }
}

function getStatusClass(status) {
    switch (status.toLowerCase()) {
        case 'published': return 'text-green-500';
        case 'draft': return 'text-yellow-500';
        case 'archived': return 'text-red-500';
        case 'scheduled': return 'text-blue-500';
        default: return 'text-red-500';
    }
}

// Improved buildPageTree function
function buildPageTree(pages) {
    const tree = { published: {}, draft: {}, archived: {} };
    pages.forEach(page => {
        const [folder, ...templateParts] = (page.templatePath || 'No Template').split('/');
        const template = templateParts.join('/') || 'No Template';
        const section = page.archived ? 'archived' : (page.state === 'DRAFT' ? 'draft' : 'published');

        tree[section][folder] = tree[section][folder] || {};
        tree[section][folder][template] = tree[section][folder][template] || [];
        tree[section][folder][template].push(page);
    });

    // Sort folders alphabetically within each section
    for (const section in tree) {
        tree[section] = Object.fromEntries(
            Object.entries(tree[section]).sort(([a], [b]) => a.localeCompare(b))
        );
    }

    return tree;
}

function formatDate(dateString) {
    if (!dateString || dateString === "1970-01-01T00:00:00Z") {
        return 'N/A';
    }
    return new Date(dateString).toLocaleString();
}

const pageTree = pages.length > 0 ? buildPageTree(pages) : null;

const API_ENDPOINTS = {
    changeTemplate: '/api/templates/change',
    updateBatch: '/api/pages/update-batch',
    restorePage: '/api/pages/restore',
};

function handleError(message) {
    console.error(message);
    alert(message);
}

const domains = await getDomains(accessToken);
---

<Layout title="HubSpot Site Pages">
    <main class="container mx-auto max-w-4xl px-4 py-8">
        <h1 class="text-4xl font-bold mb-8 text-blue-200">HubSpot Site Pages <span class="text-xl text-blue-500">({pages.length} pages)</span></h1>
        <p class="text-sm max-w-xl mb-6 text-blue-100">Click a template to change all pages in that template. Click a page to change that page's template. Click <span class="text-orange-300">Restore Page</span> to restore an archived page.</p>
        {error && <p class="text-red-500 mb-6 p-4 bg-red-100 rounded-lg">{error}</p>}
        {pages.length === 0 ? (
            <p class="text-gray-400 text-xl">No pages found. {error ? 'An error occurred while fetching pages.' : ''}</p>
        ) : (
            <PageTree pages={pages} />
        )}
        <a href="/" class="inline-block mt-8 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">Back to Home</a>
    </main>
    <TemplateModal />
    <DomainModal />
</Layout>

<script define:vars={{ API_ENDPOINTS }}>
    document.addEventListener('DOMContentLoaded', () => {
        // Helper function for API calls
        async function apiCall(endpoint, data) {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            if (!response.ok) throw new Error('API call failed');
            return response.json();
        }

        // Event listener for changing a single template
        document.querySelectorAll('.change-template-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const { pageId, templatePath: currentTemplatePath } = btn.dataset;
                const newTemplatePath = await window.openTemplateModal(pageId, currentTemplatePath);
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.changeTemplate, { pageId, templatePath: newTemplatePath });
                        alert('Template updated successfully!');
                        location.reload();
                    } catch (error) {
                        handleError('Failed to update template. Please try again.');
                    }
                }
            });
        });

        // Event listener for changing multiple templates
        document.querySelectorAll('.change-all-templates-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const { templatePath } = btn.dataset;
                const pageIds = Array.from(btn.closest('details').querySelectorAll('.change-template-btn'))
                    .map(btn => btn.getAttribute('data-page-id'));

                const newTemplatePath = await window.openTemplateModal(pageIds, templatePath);
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.updateBatch, {
                            inputs: pageIds.map(id => ({ id, templatePath: newTemplatePath }))
                        });
                        alert('Templates updated successfully!');
                        location.reload();
                    } catch (error) {
                        handleError('Failed to update templates. Please try again.');
                    }
                }
            });
        });

        // Event listener for restoring pages
        document.querySelectorAll('.restore-page-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const { pageId } = btn.dataset;
                if (pageId) {
                    try {
                        const result = await apiCall(API_ENDPOINTS.restorePage, { pageId });
                        if (result.success) {
                            alert('Page restored successfully!');
                            location.reload();
                        } else {
                            throw new Error(result.error || 'Failed to restore page');
                        }
                    } catch (error) {
                        handleError('Failed to restore page. Please try again.');
                    }
                }
            });
        });
    });
</script>