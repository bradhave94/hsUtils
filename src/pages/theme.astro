---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import { checkAuth } from '../lib/middleware/auth';
import { getAuthUrl } from '../lib/auth';
import fs from 'node:fs/promises';
import path from 'node:path';

const authUrl = getAuthUrl();
const { isAuthenticated } = await checkAuth(Astro.cookies);

if (!isAuthenticated) {
  return Astro.redirect('/');
}

// Get list of themes from public/themes directory
const themesDir = path.join(process.cwd(), 'public', 'themes');
const themes = await fs.readdir(themesDir);
const themeFiles = themes.filter(file => file.endsWith('.zip'));
---

<Layout title="Theme Management">
  <main class="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4">
    <div class="w-full max-w-2xl space-y-8">
      <h1 class="text-3xl font-bold text-center mb-8">Theme Management</h1>
      
      <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Available Themes</h2>
        <div class="space-y-4">
          {themeFiles.map(theme => (
            <div class="bg-gray-700 p-4 rounded-lg">
              <div class="flex items-center justify-between">
                <span class="text-lg">{theme}</span>
                <form id={`form-${theme}`} class="flex items-center space-x-2">
                  <button
                    type="submit"
                    class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-1 px-4 rounded transition duration-300"
                  >
                    Upload & Extract
                  </button>
                </form>
              </div>
              <div id={`status-${theme}`} class="mt-2 hidden">
                <div class="flex items-center space-x-2">
                  <div class="animate-spin w-4 h-4 border-2 border-current border-t-transparent text-orange-500 rounded-full"></div>
                  <span class="text-sm status-text">Preparing...</span>
                </div>
              </div>
              <div id={`result-${theme}`} class="mt-2 hidden">
                <p class="text-sm"></p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.querySelectorAll('form[id^="form-"]').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formEl = e.currentTarget as HTMLFormElement;
      const themeId = formEl.id.replace('form-', '');
      const statusEl = document.getElementById(`status-${themeId}`)!;
      const statusText = statusEl.querySelector('.status-text')!;
      const resultEl = document.getElementById(`result-${themeId}`)!;
      const resultText = resultEl.querySelector('p')!;
      
      const formData = new FormData(formEl);
      formData.append('themeFile', themeId);

      // Show upload status
      statusEl.classList.remove('hidden');
      resultEl.classList.add('hidden');
      formEl.classList.add('opacity-50', 'pointer-events-none');

      try {
        const response = await fetch('/api/theme/upload', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) {
          throw new Error('Failed to start theme installation');
        }

        const reader = response.body!.getReader();
        const decoder = new TextDecoder();

        while (true) {
          const { value, done } = await reader.read();
          if (done) break;
          
          const chunk = decoder.decode(value);
          const lines = chunk.split('\n');
          
          for (const line of lines) {
            if (line.startsWith('data: ') && line.length > 6) {  // Only parse if there's actual data
              try {
                const data = JSON.parse(line.slice(6));
                
                if (data.error) {
                  throw new Error(data.error);
                }
                
                if (data.status) {
                  statusText.textContent = data.status;
                  
                  if (data.status === 'Theme installation complete!') {
                    resultText.textContent = 'Theme installed successfully!';
                    resultText.className = 'text-sm text-green-500';
                    statusEl.classList.add('hidden');
                    resultEl.classList.remove('hidden');
                    formEl.classList.remove('opacity-50', 'pointer-events-none');
                  }
                }
              } catch (parseError) {
                console.debug('Skipping invalid JSON:', line.slice(6));
              }
            }
          }
        }
      } catch (error) {
        resultText.textContent = error instanceof Error ? error.message : 'An error occurred';
        resultText.className = 'text-sm text-red-500';
      } finally {
        statusEl.classList.add('hidden');
        resultEl.classList.remove('hidden');
        formEl.classList.remove('opacity-50', 'pointer-events-none');
      }
    });
  });
</script> 