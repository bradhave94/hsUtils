---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import BlogTree from '../components/BlogTree.astro';
import TemplateModal from '../components/TemplateModal.astro';
import DomainModal from '../components/DomainModal.astro';
import { getBlogPosts, getBlogInfo, getDomains } from '../lib/api/hubspot';
import { API_ENDPOINTS } from '../lib/constants';

let posts = [];
let blogInfo = [];
let error = '';

const accessTokenCookie = Astro.cookies.get('hubspot_access_token');
const accessToken = accessTokenCookie ? accessTokenCookie.value : null;

const portalIdCookie = Astro.cookies.get('hubspot_portal_id');
const portalId = portalIdCookie ? portalIdCookie.value : null;

if (!accessToken || !portalId) {
    return Astro.redirect('/?error=missing_credentials');
}

try {
    [posts, blogInfo] = await Promise.all([
        getBlogPosts(accessToken, Astro.url.searchParams.has('archived')),
        getBlogInfo(accessToken)
    ]);
} catch (err) {
    console.error('Error fetching blog data:', err);
    error = `Failed to fetch blog data: ${err instanceof Error ? err.message : 'Unknown error'}`;
}

const domains = await getDomains(accessToken);
---

<Layout title="HubSpot Blog Posts">
    <main class="container mx-auto max-w-4xl px-4 py-8">
        <h1 class="text-4xl font-bold mb-8 text-blue-200">HubSpot Blog Posts <span class="text-xl text-blue-500">({posts.length} posts)</span></h1>
        <p class="text-sm max-w-xl mb-6 text-blue-100">Posts are grouped by blog. Click a template to change all posts in that blog. Click a post to change that post's template.</p>
        {error && <p class="text-red-500 mb-6 p-4 bg-red-100 rounded-lg">{error}</p>}
        {posts.length === 0 ? (
            <p class="text-gray-400 text-xl">No blog posts found. {error ? 'An error occurred while fetching blog posts.' : ''}</p>
        ) : (
            <BlogTree posts={posts} blogInfo={blogInfo} />
        )}
        <a href="/" class="inline-block mt-8 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">Back to Home</a>
    </main>
    <TemplateModal />
    <DomainModal />
</Layout>

<script define:vars={{ API_ENDPOINTS }}>
    document.addEventListener('DOMContentLoaded', () => {
        async function apiCall(endpoint, data) {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            if (!response.ok) throw new Error('API call failed');
            return response.json();
        }

        // Single post template change
        document.querySelectorAll('.change-template-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const { pageId, templatePath: currentTemplatePath } = btn.dataset;
                const newTemplatePath = await window.openTemplateModal(pageId, currentTemplatePath);
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.templates.changeBlog, { pageId, templatePath: newTemplatePath });
                        alert('Template updated successfully!');
                        location.reload();
                    } catch (error) {
                        console.error('Failed to update template:', error);
                        alert('Failed to update template. Please try again.');
                    }
                }
            });
        });

        // Change all templates in a template group
        document.querySelectorAll('.change-all-templates-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const { templatePath } = btn.dataset;
                const postIds = Array.from(btn.closest('details').querySelectorAll('.change-template-btn'))
                    .map(btn => btn.getAttribute('data-page-id'));

                const newTemplatePath = await window.openTemplateModal(postIds, templatePath);
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.blogPosts.updateBatch, {
                            inputs: postIds.map(id => ({ id, templatePath: newTemplatePath }))
                        });
                        alert('Templates updated successfully!');
                        location.reload();
                    } catch (error) {
                        console.error('Failed to update templates:', error);
                        alert('Failed to update templates. Please try again.');
                    }
                }
            });
        });

        // Restore archived post
        document.querySelectorAll('.restore-page-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const { pageId } = btn.dataset;
                if (pageId) {
                    try {
                        const result = await apiCall(API_ENDPOINTS.blogPosts.restore, { pageId });
                        if (result.success) {
                            alert('Blog post restored successfully!');
                            location.reload();
                        } else {
                            throw new Error(result.error || 'Failed to restore blog post');
                        }
                    } catch (error) {
                        console.error('Failed to restore blog post:', error);
                        alert('Failed to restore blog post. Please try again.');
                    }
                }
            });
        });
    });
</script>