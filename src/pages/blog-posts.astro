---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import BlogTree from '../components/BlogTree.astro';
import TemplateModal from '../components/TemplateModal.astro';
import DomainModal from '../components/DomainModal.astro';
import SlugModal from '../components/SlugModal.astro';
import { getBlogPosts, getBlogInfo } from '../lib/api/hubspot';
import { API_ENDPOINTS } from '../lib/api/hubspot/constants';
import { checkAuth } from '../lib/middleware/auth';
import cache, { CacheType } from '../lib/utils/cache';

let posts = [];
let blogInfo = [];
let error = '';

const { accessToken, refreshToken, isAuthenticated } = await checkAuth(Astro.cookies);

if (!isAuthenticated) {
    return Astro.redirect('/?error=missing_credentials');
}

const isArchived = Astro.url.searchParams.has('archived');

try {
    // Try to get data from cache first
    posts = cache.get(CacheType.BLOGS, accessToken, { archived: isArchived }) || [];
    blogInfo = cache.get(CacheType.BLOG_INFO, accessToken) || [];

    // If not in cache, fetch from API
    if (posts.length === 0) {
        posts = await getBlogPosts(accessToken, isArchived, refreshToken);
        cache.set(CacheType.BLOGS, accessToken, posts, { archived: isArchived });
    }

    if (blogInfo.length === 0) {
        blogInfo = await getBlogInfo(accessToken, refreshToken);
        cache.set(CacheType.BLOG_INFO, accessToken, blogInfo);
    }
} catch (err) {
    console.error('Error fetching pages:', err);
    error = `Failed to fetch pages: ${err instanceof Error ? err.message : 'Unknown error'}`;
}
---

<Layout title="HubSpot Site Pages">
    <meta name="access-token" content={accessToken} />
    <main class="container mx-auto max-w-4xl px-4 py-8">
        <h1 class="text-4xl font-bold mb-4 text-blue-200">HubSpot Blog Posts <span class="text-xl text-blue-500">({posts.length} posts)</span></h1>
        
        { Astro.url.searchParams.has('archived') ? (
            <a href="/blog-posts" class="text-blue-400 hover:text-blue-300 mb-8 block">Hide archived posts</a>
        ) : (
            <a href="/blog-posts?archived=true" class="text-blue-400 hover:text-blue-300 mb-8 block">Show archived posts</a>
        )}
        
        {error && <p class="text-red-500 mb-6 p-4 bg-red-100 rounded-lg">{error}</p>}
        
        {posts.length === 0 ? (
            <p class="text-gray-400 text-xl">No pages found. {error ? 'An error occurred while fetching posts.' : ''}</p>
        ) : (
            <BlogTree posts={posts} blogInfo={blogInfo} />
        )}
        
        <a href="/" class="inline-block mt-8 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">Back to Home</a>
    </main>

    <TemplateModal />
    <DomainModal />
    <SlugModal />
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        async function apiCall(endpoint, data) {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            if (!response.ok) throw new Error('API call failed');
            return response.json();
        }

        // Initialize modals
        if (!window.openDomainModal) {
            document.dispatchEvent(new Event('domain-modal-ready'));
        }
        if (!window.openSlugModal) {
            document.dispatchEvent(new Event('slug-modal-ready'));
        }

        // Event listener for changing a single template
        document.querySelectorAll('.change-template-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const { pageId, templatePath: currentTemplatePath } = btn.dataset;
                const newTemplatePath = await window.openTemplateModal(pageId, currentTemplatePath);
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.templates.change, { pageId, templatePath: newTemplatePath });
                        alert('Template updated successfully!');
                        location.reload();
                    } catch (error) {
                        console.error('Failed to update template:', error);
                        alert('Failed to update template. Please try again.');
                    }
                }
            });
        });

        // Event listener for changing multiple templates
        document.querySelectorAll('.change-selected-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const selectedCheckboxes = document.querySelectorAll('.page-checkbox:checked');
                const selectedPageIds = Array.from(selectedCheckboxes)
                    .map(checkbox => checkbox.getAttribute('data-page-id'))
                    .filter(id => id !== null);

                if (selectedPageIds.length === 0) {
                    alert('No pages selected. Please select at least one page.');
                    return;
                }

                const newTemplatePath = await window.openTemplateModal(selectedPageIds, 'Multiple');
                if (newTemplatePath) {
                    try {
                        await apiCall(API_ENDPOINTS.blogPosts.updateBatch, {
                            inputs: selectedPageIds.map(id => ({ id, templatePath: newTemplatePath }))
                        });
                        alert('Templates updated successfully!');
                        location.reload();
                    } catch (error) {
                        console.error('Failed to update templates:', error);
                        alert('Failed to update templates. Please try again.');
                    }
                }
            });
        });
    });
</script>