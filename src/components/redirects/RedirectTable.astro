---
import { getAuthFromCookies } from '../../lib/auth';

const auth = getAuthFromCookies(Astro.cookies);

interface Redirect {
  id: string;
  routePrefix: string;
  destination: string;
  redirectStyle: number;
  isPattern: boolean;
  createdAt: string;
  updatedAt: string;
  isOnlyAfterNotFound: boolean;
  isMatchFullUrl: boolean;
  isMatchQueryString: boolean;
  isTrailingSlashOptional: boolean;
  isProtocolAgnostic: boolean;
  precedence: number;
}

const redirects: Redirect[] = [];

interface Filters {
  search: string;
  type: string;
  regexOnly: boolean;
  searchSource: boolean;
  searchDestination: boolean;
}
---

<div class="p-6 bg-gray-900 min-h-screen">
  <div class="mb-6">
    <div class="flex flex-wrap gap-4 items-center justify-between">
      <div class="flex-1 max-w-xl">
        <div class="relative">
          <input
            type="text"
            id="searchInput"
            placeholder="Search redirects..."
            class="w-full pl-10 pr-4 py-2 rounded-lg bg-gray-800 border-gray-700 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </div>
        </div>
        <div class="mt-2 flex items-center gap-4">
          <label class="flex items-center gap-2 text-gray-300">
            <input
              type="checkbox"
              id="searchSource"
              class="rounded bg-gray-800 border-gray-700 text-blue-500 focus:ring-blue-500"
              checked
            />
            Source URL
          </label>
          <label class="flex items-center gap-2 text-gray-300">
            <input
              type="checkbox"
              id="searchDestination"
              class="rounded bg-gray-800 border-gray-700 text-blue-500 focus:ring-blue-500"
              checked
            />
            Destination URL
          </label>
        </div>
      </div>
      <div class="flex items-center gap-4">
        <select
          id="typeFilter"
          class="rounded-lg bg-gray-800 border-gray-700 text-white focus:border-blue-500 focus:ring-blue-500 w-40 p-2"
        >
          <option value="all">All Types</option>
          <option value="301">301 (Permanent)</option>
          <option value="302">302 (Temporary)</option>
        </select>
        <label class="flex items-center gap-2 text-gray-300">
          <input
            type="checkbox"
            id="regexFilter"
            class="rounded bg-gray-800 border-gray-700 text-blue-500 focus:ring-blue-500"
          />
          Regex Only
        </label>
      </div>
    </div>
    <div class="mt-4 flex flex-wrap gap-3">
      <button
        id="createNew"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        Create New
      </button>
      <button
        id="bulkEdit"
        class="inline-flex items-center px-4 py-2 border border-gray-600 text-sm font-medium rounded-lg text-gray-300 bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
          <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
        </svg>
        Bulk Edit
      </button>
      <button
        id="editSelected"
        class="inline-flex items-center px-4 py-2 border border-gray-600 text-sm font-medium rounded-lg text-gray-300 bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        Edit Selected
      </button>
      <button
        id="deleteSelected"
        class="inline-flex items-center px-4 py-2 border border-red-800 text-sm font-medium rounded-lg text-red-400 bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        Delete Selected
      </button>
    </div>
  </div>

  <div class="mb-4 text-right text-gray-400">
    <div class="text-sm">
      Total redirects: <span id="totalCount" class="text-orange-500 font-medium">0</span>
    </div>
  </div>
  <div class="overflow-x-auto rounded-lg border border-gray-700 bg-gray-800">
    <table class="min-w-full divide-y divide-gray-700">
      <thead class="bg-gray-900">
        <tr>
          <th class="w-8 px-4 py-3">
            <input
              type="checkbox"
              id="selectAll"
              class="rounded bg-gray-800 border-gray-700 text-orange-500 focus:ring-orange-500"
            />
          </th>
          <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Source URL</th>
          <th class="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Destination URL</th>
          <th class="w-24 px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Type</th>
          <th class="w-20 px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Pattern</th>
          <th class="w-28 px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Created</th>
          <th class="w-24 px-4 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody id="redirectTableBody" class="divide-y divide-gray-700">
        <tr>
          <td colspan="7" class="px-4 py-8 text-center text-gray-400">
            <div class="flex flex-col items-center justify-center">
              <svg class="animate-spin h-8 w-8 text-orange-500 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span class="text-sm">Loading redirects...</span>
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<dialog id="bulkEditModal" class="modal bg-gray-900 text-white rounded-lg shadow-xl w-full max-w-2xl border-none p-0">
  <div class="p-6 w-full">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold text-orange-500">Bulk Edit Redirects</h2>
      <button class="close-modal-btn text-gray-400 hover:text-white">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <div class="space-y-4">
      <div class="flex items-center space-x-4 mb-2">
        <label class="text-sm font-medium text-gray-300">URL to Edit:</label>
        <div class="flex space-x-3">
          <label class="inline-flex items-center">
            <input type="radio" name="urlType" value="source" class="text-orange-500 bg-gray-800 border-gray-700" checked>
            <span class="ml-2 text-sm text-gray-300">Source URL</span>
          </label>
          <label class="inline-flex items-center">
            <input type="radio" name="urlType" value="destination" class="text-orange-500 bg-gray-800 border-gray-700">
            <span class="ml-2 text-sm text-gray-300">Destination URL</span>
          </label>
        </div>
      </div>

      <div class="flex space-x-2">
        <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded-md text-sm font-medium" data-pattern="#find#replace">Replace Text</button>
        <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded-md text-sm font-medium" data-pattern="#^(.*)$#/new$1">Add Prefix</button>
      </div>

      <div>
        <label for="patternInput" class="block text-sm font-medium text-gray-300 mb-1">Pattern</label>
        <input
          type="text"
          id="patternInput"
          class="w-full p-2 bg-gray-800 border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 rounded-md"
          placeholder="#pattern#replacement"
        />
        <div class="mt-1 text-sm text-gray-400">
          Examples:
          <ul class="list-disc list-inside ml-2 space-y-1">
            <li>#find#replace → replaces "find" with "replace" anywhere in the URL</li>
            <li>#^(.*)$#/new$1 → adds /new to start</li>
            <li>Use $1 to reference captured content in parentheses (.*)</li>
          </ul>
        </div>
      </div>

      <div>
        <label for="currentUrls" class="block text-sm font-medium text-gray-300 mb-1">Selected URLs</label>
        <textarea
          id="currentUrls"
          class="w-full h-32 p-2 bg-gray-800 border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 rounded-md"
          readonly
        ></textarea>
      </div>

      <div>
        <label for="previewUrls" class="block text-sm font-medium text-gray-300 mb-1">Preview</label>
        <textarea
          id="previewUrls"
          class="w-full h-32 p-2 bg-gray-800 border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 rounded-md"
          readonly
        ></textarea>
      </div>

      <div class="flex justify-end space-x-3 mt-6">
        <button class="close-modal-btn px-4 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
          Cancel
        </button>
        <button
          id="applyChangesBtn"
          class="px-4 py-2 text-sm font-medium text-white bg-orange-600 border border-transparent rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
        >
          <svg id="applySpinner" class="animate-spin -ml-1 mr-2 h-4 w-4 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span id="applyButtonText">Apply Changes</span>
        </button>
      </div>
    </div>
  </div>
</dialog>

<style>
  dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
  }

  dialog {
    border: none;
    padding: 0;
    border-radius: 0.5rem;
    max-height: 90vh;
    overflow-y: auto;
  }

  dialog[open] {
    display: flex;
  }

  dialog.hidden {
    display: none;
  }

  @media (max-width: 640px) {
    dialog {
      max-height: 95vh;
      width: calc(100% - 2rem);
      margin: 1rem;
    }
  }
</style>

<script>
  interface Filters {
    search: string;
    type: string;
    regexOnly: boolean;
    searchSource: boolean;
    searchDestination: boolean;
  }

  let currentFilters: Filters = {
    search: '',
    type: 'all',
    regexOnly: false,
    searchSource: true,
    searchDestination: true
  };

  let redirects: any[] = [];
  let filteredRedirects: any[] = [];

  async function loadRedirects() {
    const tbody = document.getElementById('redirectTableBody');
    if (!tbody) return;

    // Show loading state
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="px-4 py-8 text-center text-gray-400">
          <div class="flex flex-col items-center justify-center">
            <svg class="animate-spin h-8 w-8 text-orange-500 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-sm">Loading redirects...</span>
          </div>
        </td>
      </tr>
    `;

    try {
      let allRedirects: any[] = [];
      let hasMore = true;
      let after: string | null = null;
      let total = 0;
      const limit = 1000;

      while (hasMore) {
        let url = `/api/redirects/list`;
        const params = new URLSearchParams();

        params.append('limit', limit.toString());
        if (after) {
          params.append('after', after);
        }

        if (params.toString()) {
          url += `?${params.toString()}`;
        }

        const response = await fetch(url);
        if (!response.ok) throw new Error('Failed to load redirects');

        const data = await response.json();
        allRedirects = [...allRedirects, ...data.results];
        total = data.total;

        hasMore = data.paging?.next?.after != null;
        after = data.paging?.next?.after;
      }

      redirects = allRedirects;
      applyFilters();
    } catch (error) {
      console.error('Error loading redirects:', error);
      // Show error state
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="px-4 py-8 text-center text-red-400">
            <div class="flex flex-col items-center justify-center">
              <svg class="h-8 w-8 text-red-500 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
              <span class="text-sm">Failed to load redirects. Please try again.</span>
            </div>
          </td>
        </tr>
      `;
    }
  }

  function applyFilters() {
    filteredRedirects = redirects.filter(redirect => {
      // Search filter with URL type selection
      const searchMatch = !currentFilters.search || (
        (currentFilters.searchSource && redirect.routePrefix.toLowerCase().includes(currentFilters.search.toLowerCase())) ||
        (currentFilters.searchDestination && redirect.destination.toLowerCase().includes(currentFilters.search.toLowerCase()))
      );

      // Type filter
      const typeMatch = currentFilters.type === 'all' ||
        redirect.redirectStyle.toString() === currentFilters.type;

      // Regex filter
      const regexMatch = !currentFilters.regexOnly || redirect.isPattern;

      return searchMatch && typeMatch && regexMatch;
    });

    updateTotalCount(filteredRedirects.length);
    renderTable();
  }

  function updateTotalCount(total: number) {
    const totalCount = document.getElementById('totalCount');
    if (totalCount) {
      totalCount.textContent = total.toString();
    }
  }

  function renderTable() {
    const tbody = document.getElementById('redirectTableBody');
    if (!tbody) return;

    tbody.innerHTML = filteredRedirects.map(redirect => `
      <tr class="hover:bg-gray-700 transition-colors" data-id="${redirect.id}">
        <td class="px-4 py-3">
          <input
            type="checkbox"
            class="redirect-checkbox rounded bg-gray-800 border-gray-700 text-orange-500 focus:ring-orange-500"
          />
        </td>
        <td class="px-4 py-3 text-gray-300">${redirect.routePrefix}</td>
        <td class="px-4 py-3 text-gray-300">${redirect.destination}</td>
        <td class="px-4 py-3 whitespace-nowrap">
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
            redirect.redirectStyle === 301
              ? 'bg-green-900 text-green-200'
              : 'bg-yellow-900 text-yellow-200'
          }">
            ${redirect.redirectStyle}
          </span>
        </td>
        <td class="px-4 py-3 whitespace-nowrap">
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
            redirect.isPattern
              ? 'bg-purple-900 text-purple-200'
              : 'bg-gray-700 text-gray-300'
          }">
            ${redirect.isPattern ? 'Regex' : 'Simple'}
          </span>
        </td>
        <td class="px-4 py-3 text-gray-300">${new Date(redirect.createdAt).toLocaleDateString()}</td>
        <td class="px-4 py-3 text-center">
          <button
            class="edit-redirect text-gray-400 hover:text-orange-500 transition-colors mr-2"
            title="Edit"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
            </svg>
          </button>
          <button
            class="delete-redirect text-gray-400 hover:text-red-500 transition-colors"
            title="Delete"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </button>
        </td>
      </tr>
    `).join('');

    setupEventListeners();
  }

  function setupEventListeners() {
    // Select all checkbox
    document.getElementById('selectAll')?.addEventListener('change', (e) => {
      const checked = (e.target as HTMLInputElement).checked;
      document.querySelectorAll('.redirect-checkbox').forEach((checkbox: Element) => {
        (checkbox as HTMLInputElement).checked = checked;
      });
      updateSelectedRedirects();
    });

    // Individual checkboxes
    document.querySelectorAll('.redirect-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', updateSelectedRedirects);
    });

    // Edit buttons
    document.querySelectorAll('.edit-redirect').forEach(button => {
      button.addEventListener('click', (e) => {
        const row = (e.target as Element).closest('tr');
        const id = row?.dataset.id;
        if (!id) return;

        const redirect = redirects.find(r => r.id === id);
        if (!redirect) return;

        const event = new CustomEvent('openRedirectModal', {
          detail: { mode: 'edit', redirect }
        });
        document.dispatchEvent(event);
      });
    });

    // Delete buttons
    document.querySelectorAll('.delete-redirect').forEach(button => {
      button.addEventListener('click', async (e) => {
        const row = (e.target as Element).closest('tr');
        const id = row?.dataset.id;
        if (!id) return;

        if (!confirm('Are you sure you want to delete this redirect?')) return;

        try {
          const response = await fetch(`/api/redirects/delete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ids: [id] })
          });

          if (!response.ok) throw new Error('Failed to delete redirect');
          await loadRedirects();
        } catch (error) {
          console.error('Error deleting redirect:', error);
        }
      });
    });
  }

  function updateSelectedRedirects() {
    const selectedIds = new Set<string>();
    document.querySelectorAll('.redirect-checkbox:checked').forEach((checkbox: Element) => {
      const row = checkbox.closest('tr');
      const id = row?.dataset.id;
      if (id) selectedIds.add(id);
    });

    const event = new CustomEvent('selectedRedirectsChanged', {
      detail: { selectedIds: Array.from(selectedIds) }
    });
    document.dispatchEvent(event);
  }

  // Update filter event handling
  document.addEventListener('filterRedirects', ((e: CustomEvent) => {
    const { search, type, regexOnly, searchSource, searchDestination } = e.detail;
    currentFilters = {
      search,
      type,
      regexOnly,
      searchSource,
      searchDestination
    };
    applyFilters();
  }) as EventListener);

  // Reload event handling
  document.addEventListener('reloadRedirects', () => {
    loadRedirects();
  });

  // Initial load
  loadRedirects();

  // Add search functionality
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const typeFilter = document.getElementById('typeFilter') as HTMLSelectElement;
  const regexFilter = document.getElementById('regexFilter') as HTMLInputElement;
  const searchSource = document.getElementById('searchSource') as HTMLInputElement;
  const searchDestination = document.getElementById('searchDestination') as HTMLInputElement;

  let searchTimeout: number | null = null;

  function handleSearch() {
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }

    searchTimeout = setTimeout(() => {
      const event = new CustomEvent('filterRedirects', {
        detail: {
          search: searchInput.value,
          type: typeFilter.value,
          regexOnly: regexFilter.checked,
          searchSource: searchSource.checked,
          searchDestination: searchDestination.checked
        }
      });
      document.dispatchEvent(event);
    }, 300) as unknown as number;
  }

  // Add event listeners for search and filters
  searchInput?.addEventListener('input', handleSearch);
  typeFilter?.addEventListener('change', handleSearch);
  regexFilter?.addEventListener('change', handleSearch);
  searchSource?.addEventListener('change', handleSearch);
  searchDestination?.addEventListener('change', handleSearch);

  // Create New button
  document.getElementById('createNew')?.addEventListener('click', () => {
    const event = new CustomEvent('openRedirectModal', {
      detail: { mode: 'create' }
    });
    document.dispatchEvent(event);
  });

  // Edit Selected button
  document.getElementById('editSelected')?.addEventListener('click', () => {
    const selectedCheckboxes = document.querySelectorAll('.redirect-checkbox:checked');
    if (selectedCheckboxes.length !== 1) return;

    const row = selectedCheckboxes[0].closest('tr');
    const id = row?.dataset.id;
    if (!id) return;

    const redirect = redirects.find(r => r.id === id);
    if (!redirect) return;

    const event = new CustomEvent('openRedirectModal', {
      detail: { mode: 'edit', redirect }
    });
    document.dispatchEvent(event);
  });

  // Delete Selected button
  document.getElementById('deleteSelected')?.addEventListener('click', async () => {
    const selectedIds = Array.from(document.querySelectorAll('.redirect-checkbox:checked')).map(
      checkbox => checkbox.closest('tr')?.dataset.id
    ).filter(Boolean) as string[];

    if (!selectedIds.length) return;
    if (!confirm(`Are you sure you want to delete ${selectedIds.length} redirect(s)?`)) return;

    try {
      const response = await fetch('/api/redirects/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds })
      });

      if (!response.ok) throw new Error('Failed to delete redirects');
      await loadRedirects();
    } catch (error) {
      console.error('Error deleting redirects:', error);
    }
  });

  // Update selected buttons state
  document.addEventListener('selectedRedirectsChanged', ((e: CustomEvent) => {
    const { selectedIds } = e.detail;
    const editButton = document.getElementById('editSelected') as HTMLButtonElement;
    const deleteButton = document.getElementById('deleteSelected') as HTMLButtonElement;

    if (editButton) {
      editButton.disabled = selectedIds.length !== 1;
    }
    if (deleteButton) {
      deleteButton.disabled = selectedIds.length === 0;
    }
  }) as EventListener);

  // Add bulk edit functionality
  const bulkEditModal = document.getElementById('bulkEditModal') as HTMLDialogElement;
  const patternInput = document.getElementById('patternInput') as HTMLInputElement;
  const currentUrls = document.getElementById('currentUrls') as HTMLTextAreaElement;
  const previewUrls = document.getElementById('previewUrls') as HTMLTextAreaElement;
  const applyChangesBtn = document.getElementById('applyChangesBtn');
  const closeButtons = bulkEditModal?.querySelectorAll('.close-modal-btn');
  const patternButtons = bulkEditModal?.querySelectorAll('.pattern-btn');

  function updatePreview() {
    try {
      const patternValue = patternInput.value;
      const selectedUrlType = document.querySelector('input[name="urlType"]:checked') as HTMLInputElement;
      const urlType = selectedUrlType?.value || 'source';

      if (!patternValue) {
        previewUrls.value = '';
        return;
      }

      const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];

      if (!pattern || replacement === undefined) {
        previewUrls.value = 'Invalid pattern format. Use #pattern#replacement';
        return;
      }

      const regex = new RegExp(pattern);
      const selectedRedirects = getSelectedRedirects();

      const previews = selectedRedirects.map(redirect => {
        // Choose which URL to edit based on the selected type
        const originalUrl = urlType === 'source' ? redirect.routePrefix : redirect.destination;
        // Apply regex directly to the full URL string
        const newUrl = originalUrl.replace(regex, replacement);
        return newUrl;
      });

      previewUrls.value = previews.join('\n');
    } catch (error) {
      previewUrls.value = 'Invalid regex pattern: ' + (error instanceof Error ? error.message : 'Unknown error');
    }
  }

  function getSelectedRedirects() {
    const selectedCheckboxes = document.querySelectorAll('.redirect-checkbox:checked');
    return Array.from(selectedCheckboxes).map(checkbox => {
      const row = checkbox.closest('tr');
      const id = row?.dataset.id;
      return redirects.find(r => r.id === id);
    }).filter(Boolean);
  }

  // Function to update the selected URLs display
  function updateSelectedUrlsDisplay() {
    const selectedUrlType = document.querySelector('input[name="urlType"]:checked') as HTMLInputElement;
    const urlType = selectedUrlType?.value || 'source';
    const selectedRedirects = getSelectedRedirects();
    currentUrls.value = selectedRedirects.map(r => urlType === 'source' ? r.routePrefix : r.destination).join('\n');
  }

  // Add event listeners for URL type radio buttons
  document.querySelectorAll('input[name="urlType"]').forEach(radio => {
    radio.addEventListener('change', () => {
      updateSelectedUrlsDisplay();
      updatePreview();
    });
  });

  // Update Bulk Edit button click handler
  document.getElementById('bulkEdit')?.addEventListener('click', () => {
    const selectedRedirects = getSelectedRedirects();
    updateSelectedUrlsDisplay(); // Use the new function instead of direct assignment
    patternInput.value = '';
    previewUrls.value = '';
    bulkEditModal?.showModal();
  });

  // Pattern input changes
  patternInput?.addEventListener('input', () => {
    updatePreview();
  });

  // Also trigger preview on pattern button clicks
  patternButtons?.forEach(btn => {
    btn.addEventListener('click', () => {
      const pattern = btn.getAttribute('data-pattern');
      if (pattern) {
        patternInput.value = pattern;
        updatePreview();
      }
    });
  });

  // Close buttons
  closeButtons?.forEach(btn => {
    btn.addEventListener('click', () => {
      bulkEditModal?.close();
    });
  });

  // Close on click outside
  bulkEditModal?.addEventListener('click', (e) => {
    if (e.target === bulkEditModal) {
      bulkEditModal.close();
    }
  });

  // Apply changes
  applyChangesBtn?.addEventListener('click', async () => {
    const spinner = document.getElementById('applySpinner');
    const buttonText = document.getElementById('applyButtonText');
    const button = document.getElementById('applyChangesBtn') as HTMLButtonElement;

    try {
      const selectedRedirects = getSelectedRedirects();
      const patternValue = patternInput.value;
      const selectedUrlType = document.querySelector('input[name="urlType"]:checked') as HTMLInputElement;
      const urlType = selectedUrlType?.value || 'source';
      const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];

      if (!pattern || replacement === undefined) {
        alert('Invalid pattern format. Use #pattern#replacement');
        return;
      }

      const regex = new RegExp(pattern);
      const updates = selectedRedirects.map(redirect => {
        const originalUrl = urlType === 'source' ? redirect.routePrefix : redirect.destination;
        const newUrl = originalUrl.replace(regex, replacement);

        return {
          id: redirect.id,
          routePrefix: urlType === 'source' ? newUrl : redirect.routePrefix,
          destination: urlType === 'destination' ? newUrl : redirect.destination,
          redirectStyle: redirect.redirectStyle,
          isPattern: redirect.isPattern
        };
      });

      // Show loading state with initial count
      if (spinner) spinner.classList.remove('hidden');
      if (button) button.disabled = true;

      // Process in smaller batches with rate limit handling
      const batchSize = 50; // Reduced batch size
      const totalBatches = Math.ceil(updates.length / batchSize);
      let processedCount = 0;
      let failedUpdates: any[] = [];
      let retryDelay = 1000; // Start with 1 second delay

      for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
        const start = batchIndex * batchSize;
        const end = Math.min(start + batchSize, updates.length);
        const batch = updates.slice(start, end);

        // Update progress
        if (buttonText) {
          buttonText.textContent = `Updating ${processedCount + 1}-${end} of ${updates.length}...`;
        }

        let retryCount = 0;
        const maxRetries = 3;
        let success = false;

        while (!success && retryCount < maxRetries) {
          try {
            // Call API to update redirects
            const response = await fetch('/api/redirects/bulk-update', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ redirects: batch })
            });

            if (!response.ok) {
              const errorData = await response.json();

              // Handle rate limit specifically
              if (errorData.errorType === 'RATE_LIMIT') {
                retryCount++;
                if (retryCount < maxRetries) {
                  // Exponential backoff
                  await new Promise(resolve => setTimeout(resolve, retryDelay));
                  retryDelay *= 2; // Double the delay for next retry
                  continue;
                }
              }

              throw new Error(errorData.message || 'Failed to update redirects');
            }

            const result = await response.json();
            if (result.failures) {
              failedUpdates = [...failedUpdates, ...result.failures];
            }

            success = true;
            retryDelay = 1000; // Reset delay after successful request
          } catch (error) {
            console.error('Error updating batch:', error);
            retryCount++;

            if (retryCount === maxRetries) {
              failedUpdates.push(`Batch ${batchIndex + 1} failed after ${maxRetries} retries: ${error instanceof Error ? error.message : 'Unknown error'}`);
            } else {
              await new Promise(resolve => setTimeout(resolve, retryDelay));
              retryDelay *= 2; // Double the delay for next retry
            }
          }
        }

        processedCount = end;

        // Add delay between batches to respect rate limit (110 requests per 10 seconds)
        // Using 100ms * batchSize to ensure we stay well under the limit
        if (batchIndex < totalBatches - 1) {
          await new Promise(resolve => setTimeout(resolve, 100 * batchSize));
        }
      }

      // Show results
      if (failedUpdates.length > 0) {
        alert(`Updates completed with ${failedUpdates.length} errors:\n\n${failedUpdates.join('\n')}`);
      } else {
        alert('All updates completed successfully!');
      }

      // Reload redirects and close modal
      await loadRedirects();
      bulkEditModal?.close();
    } catch (error) {
      console.error('Error updating redirects:', error);
      alert('Failed to update redirects: ' + (error instanceof Error ? error.message : 'Unknown error'));
    } finally {
      // Reset button state
      if (spinner) spinner.classList.add('hidden');
      if (buttonText) buttonText.textContent = 'Apply Changes';
      if (button) button.disabled = false;
    }
  });

  // Update selected buttons state to include bulk edit
  document.addEventListener('selectedRedirectsChanged', ((e: CustomEvent) => {
    const { selectedIds } = e.detail;
    const editButton = document.getElementById('editSelected') as HTMLButtonElement;
    const deleteButton = document.getElementById('deleteSelected') as HTMLButtonElement;
    const bulkEditButton = document.getElementById('bulkEdit') as HTMLButtonElement;

    if (editButton) {
      editButton.disabled = selectedIds.length !== 1;
    }
    if (deleteButton) {
      deleteButton.disabled = selectedIds.length === 0;
    }
    if (bulkEditButton) {
      bulkEditButton.disabled = selectedIds.length === 0;
    }
  }) as EventListener);
</script>