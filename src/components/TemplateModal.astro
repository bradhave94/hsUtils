---
import type { HubSpotTemplate } from '../types/hubspot';
import { getTemplates } from '../lib/api/hubspot';

let templates: HubSpotTemplate[] | null = null;
let error = '';

const accessTokenCookie = Astro.cookies.get('hubspot_access_token');
const accessToken = accessTokenCookie ? accessTokenCookie.value : null;

if (accessToken) {
    try {
        templates = await getTemplates(accessToken);
        templates.sort((a, b) => a.path.localeCompare(b.path));
    } catch (err) {
        console.error('Error fetching templates:', err);
        error = err instanceof Error ? err.message : 'Failed to fetch templates';
        templates = null;
    }
}

function buildFileTree(templates: HubSpotTemplate[]): Record<string, any> {
    const tree = {};
    for (const template of templates) {
        const parts = template.path.split('/');
        let currentLevel = tree;
        for (const [index, part] of parts.entries()) {
            if (!currentLevel[part]) {
                if (index === parts.length - 1) {
                    currentLevel[part] = template;
                } else {
                    currentLevel[part] = {};
                }
            }
            currentLevel = currentLevel[part];
        }
    }
    return tree;
}

function renderFileTree(tree: Record<string, any>): string {
    let html = '';
    for (const [name, subtree] of Object.entries(tree)) {
        if (subtree.path) {
            html += `
            <li class="file bg-gray-600 rounded-lg p-4 cursor-pointer" data-template-path="${subtree.path}">
                <div class="flex items-center justify-between">
                    <div class="flex-grow">
                        <h3 class="text-lg font-semibold text-white">${subtree.label || subtree.filename}</h3>
                        <div class="mt-2 text-sm text-gray-300">
                            <p>Full Path: ${subtree.path}</p>
                        </div>
                    </div>
                </div>
            </li>`;
        } else {
            html += `
            <li class="folder-group">
                <details class="bg-gray-800 rounded-lg p-4 open">
                    <summary class="flex items-center cursor-pointer">
                        <span class="mr-2 text-xl">üìÅ</span>
                        <span class="text-xl font-semibold text-white">${name}</span>
                    </summary>
                    <ul class="mt-4 space-y-4">
                        ${renderFileTree(subtree)}
                    </ul>
                </details>
            </li>`;
        }
    }
    return html;
}

const fileTree = templates ? buildFileTree(templates) : null;
---

<dialog id="templateModal" class=" modal bg-gray-900 text-white rounded-lg shadow-xl w-full max-w-4xl flex flex-col h-[90vh] border-none p-0" role="dialog" aria-labelledby="modalTitle" aria-modal="true">
    <div class="p-6 sm:p-8">
        <h2 id="modalTitle" class="text-2xl sm:text-3xl font-bold mb-4 text-orange-500">Change Template</h2>
        <p id="modalDescription" class="mb-4 text-gray-300 text-sm sm:text-base"></p>
    </div>
    <div class="file-tree-container flex-grow overflow-y-auto px-6 sm:px-8" role="tree">
        <ul class="space-y-3">
            {fileTree && <Fragment set:html={renderFileTree(fileTree)} />}
        </ul>
    </div>
    <div class="modal-actions p-4 bg-gray-800 flex justify-end space-x-4 sticky bottom-0">
        <button id="cancelTemplateChange" class="close-modal-btn bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition duration-300 text-sm sm:text-base" aria-label="Cancel template change">Cancel</button>
        <button id="confirmTemplateChange" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded" disabled aria-label="Confirm template change">Confirm</button>
    </div>
</dialog>

<script>
    let resolvePromise: ((value: string | null) => void) | null = null;
    let selectedTemplatePath: string | null = null;

    function initializeTemplateModal() {
        const modal = document.getElementById('templateModal') as HTMLDialogElement;
        if (!modal) return;

        window.openTemplateModal = async (pageIds: string | string[], currentTemplatePath?: string): Promise<string | null> => {
            selectedTemplatePath = null;
            modal.showModal();

            // Highlight current template
            const currentTemplateElement = document.querySelector(`[data-template-path="${currentTemplatePath}"]`);
            if (currentTemplateElement) {
                currentTemplateElement.classList.add('current-template');
            }

            return new Promise<string | null>((resolve) => {
                resolvePromise = resolve;
            });
        };

        // Handle template selection
        const fileElements = document.querySelectorAll('.file[data-template-path]');
        fileElements.forEach(element => {
            element.addEventListener('click', (e) => {
                const target = e.currentTarget as HTMLElement;
                const templatePath = target.getAttribute('data-template-path');

                // Remove previous selection
                document.querySelector('.selected-template')?.classList.remove('selected-template', 'bg-slate-900', 'bg-opacity-50');

                // Add new selection
                target.classList.add('selected-template', 'bg-slate-900', 'bg-opacity-50');
                selectedTemplatePath = templatePath;

                const confirmButton = document.getElementById('confirmTemplateChange') as HTMLButtonElement;
                confirmButton.disabled = false;
            });
        });

        // Handle confirm button
        const confirmButton = document.getElementById('confirmTemplateChange');
        confirmButton?.addEventListener('click', () => {
            if (resolvePromise && selectedTemplatePath) {
                resolvePromise(selectedTemplatePath);
                resolvePromise = null;
                modal.close();
            }
        });

        // Handle cancel button and close
        const closeButtons = modal.querySelectorAll('.close-modal-btn');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                if (resolvePromise) {
                    resolvePromise(null);
                    resolvePromise = null;
                }
                modal.close();
            });
        });

        // Handle click outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (resolvePromise) {
                    resolvePromise(null);
                    resolvePromise = null;
                }
                modal.close();
            }
        });
    }

    document.addEventListener('DOMContentLoaded', initializeTemplateModal);
</script>

<style>
    dialog::backdrop {
        background: rgba(0, 0, 0, 0.5);
    }

    dialog {
        border: none;
        padding: 0;
        border-radius: 0.5rem;
        max-height: 90vh;
        overflow-y: auto;
        display: none;
    }

    dialog[open] {
        display: flex;
    }

    .file-tree-container {
        scrollbar-width: thin;
        scrollbar-color: #4B5563 #1F2937;
    }

    .file-tree-container::-webkit-scrollbar {
        width: 8px;
    }

    .file-tree-container::-webkit-scrollbar-track {
        background: #1F2937;
    }

    .file-tree-container::-webkit-scrollbar-thumb {
        background-color: #4B5563;
        border-radius: 4px;
    }

    .file, .folder > details {
        @apply transition duration-300;
    }

    .current-template {
        @apply bg-orange-900 bg-opacity-50;
    }

    .selected-template {
        @apply bg-green-900 bg-opacity-50;
    }

    #confirmTemplateChange:disabled {
        @apply opacity-50 cursor-not-allowed;
    }

    @media (max-width: 640px) {
        dialog {
            max-height: 95vh;
        }
    }
</style>