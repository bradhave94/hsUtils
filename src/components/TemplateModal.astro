---
import { getTemplates } from '../lib/hubspot/api';
import type { HubSpotTemplate } from '../types/HubSpotTemplate';

let templates: HubSpotTemplate[] | null = null;
let error = '';

const accessTokenCookie = Astro.cookies.get('hubspot_access_token');
const accessToken = accessTokenCookie ? accessTokenCookie.value : null;

if (accessToken) {
    try {
        templates = await getTemplates(accessToken);
        templates.sort((a, b) => a.path.localeCompare(b.path));
    } catch (err) {
        console.error('Error fetching templates:', err);
        error = `Failed to fetch templates: ${err}`;
        templates = null;
    }
}

function buildFileTree(templates: HubSpotTemplate[]): any {
    const tree = {};
    templates.forEach(template => {
        const parts = template.path.split('/');
        let currentLevel = tree;
        parts.forEach((part, index) => {
            if (!currentLevel[part]) {
                if (index === parts.length - 1) {
                    // This is the leaf node (actual template)
                    currentLevel[part] = template;
                } else {
                    // This is an intermediate directory
                    currentLevel[part] = {};
                }
            }
            currentLevel = currentLevel[part];
        });
    });
    return tree;
}

function renderFileTree(tree: any): string {
    let html = '';
    for (const [name, subtree] of Object.entries(tree)) {
        if (subtree.path) {
            // This is a template (leaf node)
            html += `
            <li class="file bg-gray-600 rounded-lg p-4 cursor-pointer" data-template-path="${subtree.path}">
                <div class="flex items-center justify-between">
                    <div class="flex-grow">
                        <h3 class="text-lg font-semibold text-white">${subtree.label || subtree.filename}</h3>
                        <div class="mt-2 text-sm text-gray-300">
                            <p>Full Path: ${subtree.path}</p>
                        </div>
                    </div>
                </div>
            </li>`;
        } else {
            // This is a folder
            html += `
            <li class="folder-group">
                <details class="bg-gray-800 rounded-lg p-4 open">
                    <summary class="flex items-center cursor-pointer">
                        <span class="mr-2 text-xl">üìÅ</span>
                        <span class="text-xl font-semibold text-white">${name}</span>
                    </summary>
                    <ul class="mt-4 space-y-4">
                        ${renderFileTree(subtree)}
                    </ul>
                </details>
            </li>`;
        }
    }
    return html;
}

const fileTree = templates ? buildFileTree(templates) : null;
---

<div id="templateModal" class="modal fixed inset-0 z-50 overflow-hidden bg-black bg-opacity-50 flex items-center justify-center p-4" role="dialog" aria-labelledby="modalTitle" aria-modal="true">
    <div class="modal-content bg-gray-900 text-white rounded-lg shadow-xl w-full max-w-4xl flex flex-col h-[90vh]">
        <div class="p-6 sm:p-8">
            <h2 id="modalTitle" class="text-2xl sm:text-3xl font-bold mb-4 text-orange-500">Change Template</h2>
            <p id="modalDescription" class="mb-4 text-gray-300 text-sm sm:text-base"></p>
        </div>
        <div class="file-tree-container flex-grow overflow-y-auto px-6 sm:px-8" role="tree">
            <ul class="space-y-3">
                {fileTree && <Fragment set:html={renderFileTree(fileTree)} />}
            </ul>
        </div>
        <div class="modal-actions p-4 bg-gray-800 flex justify-end space-x-4 sticky bottom-0">
            <button id="cancelTemplateChange" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition duration-300 text-sm sm:text-base" aria-label="Cancel template change">Cancel</button>
            <button id="confirmTemplateChange" class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300 text-sm sm:text-base" disabled aria-label="Confirm template change">Confirm</button>
        </div>
    </div>
</div>

<script>
    let currentPageIds = null;
    let currentTemplatePath = null;
    let selectedTemplatePath = null;

    function openModal(pageIds, templatePath) {
    currentPageIds = Array.isArray(pageIds) ? pageIds : [pageIds];
    currentTemplatePath = templatePath;
    selectedTemplatePath = null;

    const modal = document.getElementById('templateModal');
    const description = document.getElementById('modalDescription');
    const confirmButton = document.getElementById('confirmTemplateChange');

    if (currentPageIds.length > 1) {
        description.innerHTML = `Changing template for ${currentPageIds.length} pages.<br>Current template: ${currentTemplatePath}`;
    } else if (currentPageIds.length === 1) {
        description.innerHTML = `Changing template for 1 page.<br>Current template: ${currentTemplatePath}`;
    } else {
        description.innerHTML = `Select a new template.<br>Current template: ${currentTemplatePath}`;
    }

    modal.style.display = 'flex';
    confirmButton.disabled = true;

    // Highlight the current template in the file tree
    const currentTemplateElement = document.querySelector(`[data-template-path="${currentTemplatePath}"]`);
    if (currentTemplateElement) {
        currentTemplateElement.classList.add('current-template');
    }

    // Add click events to file elements
    const fileElements = document.querySelectorAll('.file[data-template-path]');
    fileElements.forEach(fileElement => {
        fileElement.addEventListener('click', handleTemplateSelection);
    });
}

    function closeModal() {
        const modal = document.getElementById('templateModal');
        modal.style.display = 'none';

        // Remove highlight from the current template
        const currentTemplateElement = document.querySelector('.current-template');
        if (currentTemplateElement) {
            currentTemplateElement.classList.remove('current-template');
        }

        // Remove highlight from the selected template
        const selectedTemplateElement = document.querySelector('.selected-template');
        if (selectedTemplateElement) {
            selectedTemplateElement.classList.remove('selected-template');
        }

        // Remove click events from file elements
        const fileElements = document.querySelectorAll('.file[data-template-path]');
        fileElements.forEach(fileElement => {
            fileElement.removeEventListener('click', handleTemplateSelection);
        });
    }

    function handleTemplateSelection(e) {
        const fileElement = e.currentTarget;
        const templatePath = fileElement.getAttribute('data-template-path');
        const confirmButton = document.getElementById('confirmTemplateChange');

        // Remove highlight from previously selected template
        const previouslySelected = document.querySelector('.selected-template');
        if (previouslySelected) {
            previouslySelected.classList.remove('selected-template');
        }

        // Highlight the newly selected template
        fileElement.classList.add('selected-template');

        selectedTemplatePath = templatePath;
        confirmButton.disabled = false;
    }

    document.getElementById('cancelTemplateChange').addEventListener('click', () => {
        closeModal();
        window.resolveTemplateChange(null);
    });

    document.getElementById('confirmTemplateChange').addEventListener('click', () => {
        closeModal();
        window.resolveTemplateChange(selectedTemplatePath);
    });

    window.openTemplateModal = (pageIds, templatePath) => {
        return new Promise((resolve) => {
            window.resolveTemplateChange = resolve;
            openModal(pageIds, templatePath);
        });
    };
</script>

<style is:global>
    .modal {
        display: none;
    }

    .modal-content {
        max-height: 90vh;
    }

    .file-tree-container {
        scrollbar-width: thin;
        scrollbar-color: #4B5563 #1F2937;
    }

    .file-tree-container::-webkit-scrollbar {
        width: 8px;
    }

    .file-tree-container::-webkit-scrollbar-track {
        background: #1F2937;
    }

    .file-tree-container::-webkit-scrollbar-thumb {
        background-color: #4B5563;
        border-radius: 4px;
    }

    .file, .folder > details {
        @apply transition duration-300;
    }

    .current-template {
        @apply bg-orange-900 bg-opacity-50;
    }

    .selected-template {
        @apply bg-green-900 bg-opacity-50;
    }

    #confirmTemplateChange:disabled {
        @apply opacity-50 cursor-not-allowed;
    }

    @media (max-width: 640px) {
        .modal-content {
            max-height: 95vh;
        }
    }
</style>