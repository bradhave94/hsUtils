---
import type { Domain } from '../types/hubspot';
import { getDomains } from '../lib/api/hubspot';

const accessTokenCookie = Astro.cookies.get('hubspot_access_token');
const accessToken = accessTokenCookie ? accessTokenCookie.value : null;
const domains: Domain[] = accessToken ? await getDomains(accessToken) : [];
---

<dialog id="domainModal" class="bg-gray-800 p-6 rounded-lg shadow-xl text-white w-[600px]">
    <div class="flex justify-between items-center mb-4 px-4 pt-4">
        <h3 class="text-xl font-bold">Change Domain</h3>
        <button class="close-modal-btn text-gray-400 hover:text-white">&times;</button>
    </div>
    <div class="space-y-4 px-4 pb-4">
        <div class="domains-list space-y-2">
            {domains.map(domain => (
                <button
                    class="domain-option w-full text-left p-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                    data-domain={domain.domain}
                >
                    <div class="flex items-center justify-between">
                        <span>{domain.domain}</span>
                        <div class="flex space-x-2">
                            {domain.isPrimary && (
                                <span class="px-2 py-1 text-xs bg-blue-500 rounded">Primary</span>
                            )}
                            {domain.isDefault && (
                                <span class="px-2 py-1 text-xs bg-green-500 rounded">Default</span>
                            )}
                        </div>
                    </div>
                </button>
            ))}
        </div>
        <div class="flex justify-end space-x-3 mt-4">
            <button class="close-modal-btn bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded">Cancel</button>
        </div>
    </div>
</dialog>

<script>
    let resolvePromise: ((value: string | null) => void) | null = null;

    function initializeDomainModal() {
        window.openDomainModal = async () => {
            const modal = document.getElementById('domainModal') as HTMLDialogElement;
            if (!modal) throw new Error('Domain modal not found');
            
            modal.showModal();
            return new Promise<string | null>((resolve) => {
                resolvePromise = resolve;
            });
        };
    }

    // Initialize on DOM content loaded
    document.addEventListener('DOMContentLoaded', () => {
        initializeDomainModal();
        
        const modal = document.getElementById('domainModal') as HTMLDialogElement;
        if (!modal) return;

        const closeButtons = modal.querySelectorAll('.close-modal-btn');
        const domainOptions = modal.querySelectorAll('.domain-option');

        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                modal.close();
                if (resolvePromise) {
                    resolvePromise(null);
                    resolvePromise = null;
                }
            });
        });

        domainOptions.forEach(option => {
            option.addEventListener('click', () => {
                const domain = option.getAttribute('data-domain');
                if (domain && resolvePromise) {
                    resolvePromise(domain);
                    resolvePromise = null;
                    modal.close();
                }
            });
        });

        // Close on click outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.close();
                if (resolvePromise) {
                    resolvePromise(null);
                    resolvePromise = null;
                }
            }
        });
    });

    // Initialize on custom event
    document.addEventListener('domain-modal-ready', initializeDomainModal);
</script>

<style>
    dialog::backdrop {
        background: rgba(0, 0, 0, 0.5);
    }

    dialog {
        border: none;
        padding: 0;
        border-radius: 0.5rem;
        max-height: 90vh;
        overflow-y: auto;
    }

    .domains-list {
        max-height: 60vh;
        overflow-y: auto;
    }

    .domains-list::-webkit-scrollbar {
        width: 8px;
    }

    .domains-list::-webkit-scrollbar-track {
        background: #374151;
        border-radius: 4px;
    }

    .domains-list::-webkit-scrollbar-thumb {
        background: #4B5563;
        border-radius: 4px;
    }

    .domains-list::-webkit-scrollbar-thumb:hover {
        background: #6B7280;
    }
</style>