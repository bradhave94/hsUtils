---
import type { HubSpotPage } from '../types/hubspot';
import { formatDate } from '../lib/utils/date';

interface Props {
    pages: HubSpotPage[];
}

const { pages } = Astro.props;

function buildPageTree(pages: HubSpotPage[]) {
    const searchParams = new URLSearchParams(Astro.url.search);
    const groupPages = searchParams.get('group') !== 'false';

    const tree = groupPages
        ? { published: {}, draft: {}, archived: {} }
        : { all: {}, archived: {} };

    pages.forEach(page => {
        const templatePath = page.templatePath || 'No Template';
        const [folder, ...templateParts] = templatePath.split('/');
        const template = templateParts.join('/') || 'No Template';

        let section = 'all';

        if (groupPages) {
            if (page.state === 'DRAFT' && !page.archived) {
                section = 'draft';
            } else if (page.archived) {
                section = 'archived';
            } else {
                section = 'published';
            }
        } else {
            section = page.archived ? 'archived' : 'all';
        }

        if (!tree[section][folder]) {
            tree[section][folder] = {};
        }
        if (!tree[section][folder][template]) {
            tree[section][folder][template] = [];
        }
        tree[section][folder][template].push(page);
    });

    // Sort folders alphabetically within each section
    for (const section in tree) {
        tree[section] = Object.fromEntries(
            Object.entries(tree[section]).sort(([a], [b]) => a.localeCompare(b))
        );
    }

    return tree;
}

function getStatusLabel(page: HubSpotPage): string {
    if (page.archivedAt && !page.archivedAt.includes('1970')) return 'Archived';
    switch (page.state) {
        case 'PUBLISHED': return 'Published';
        case 'DRAFT': return 'Draft';
        case 'SCHEDULED': return 'Scheduled';
        case 'PUBLISHED_OR_SCHEDULED': return 'Published';
        default: return page.state || 'Draft';
    }
}

function getStatusClass(status: string): string {
    switch (status.toLowerCase()) {
        case 'published': return 'text-green-500';
        case 'draft': return 'text-yellow-500';
        case 'archived': return 'text-red-500';
        case 'scheduled': return 'text-blue-500';
        default: return 'text-gray-500';
    }
}

const pageTree = buildPageTree(pages);
const portalId = Astro.cookies.get('hubspot_portal_id')?.value;
const groupPages = new URLSearchParams(Astro.url.search).get('group') !== 'false';
const showArchived = Astro.url.searchParams.has('archived');
---

<div class="page-tree-container">
    <div class="flex space-x-4 mb-4">
        <button id="changeSelectedBtn" class="change-selected-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Change Selected Template
        </button>
        <button id="changeSelectedDomainsBtn" class="changeSelectedDomainsBtn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Change Selected Domains
        </button>
        <button id="changeSelectedSlugsBtn" class="changeSelectedSlugsBtn bg-yellow-600 hover:bg-yellow-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Change Selected Slugs
        </button>
    </div>

    {(groupPages ? ['published', 'draft', 'archived'] : ['all', 'archived']).map(section => (
        (section !== 'archived' || showArchived) && (
            <div>
                <h2 class="text-3xl font-bold mb-6 mt-8 capitalize text-blue-200">
                    {section === 'all' ? 'All Pages' : `${section} Pages`}
                </h2>
                <ul class="space-y-3">
                    {Object.entries(pageTree[section]).map(([folder, templates]) => (
                        <li class="folder-group">
                            <details class="bg-gray-800 rounded-lg p-4">
                                <summary class="flex items-center cursor-pointer">
                                    <span class="mr-2 text-xl">üìÅ</span>
                                    <span class="text-xl font-semibold text-white">{folder}</span>
                                </summary>
                                <ul class="mt-4 space-y-4">
                                    {Object.entries(templates).map(([templatePath, pages]) => (
                                        <li class="template-group">
                                            <details class="bg-gray-700 rounded-lg p-4" >
                                                <summary class="flex items-center justify-between cursor-pointer">
                                                    <div class="flex items-center">
                                                        <input type="checkbox" class="template-checkbox custom-checkbox mr-2" data-template-path={`${folder}/${templatePath}`} />
                                                        <span class="text-lg font-semibold text-white">{templatePath}</span>
                                                    </div>
                                                </summary>
                                                <ul class="mt-4 space-y-4">
                                                    {pages.map(page => {
                                                        const status = getStatusLabel(page);
                                                        return (
                                                            <li class="page bg-gray-600 rounded-lg p-4">
                                                                <div class="flex items-center justify-between">
                                                                    <div class="flex-grow">
                                                                        <div class="flex items-center">
                                                                            <label class="flex items-center cursor-pointer">
                                                                                <input type="checkbox" class="page-checkbox custom-checkbox mr-2" data-page-id={page.id} data-template-path={page.template_path} />
                                                                                <h3 class="text-2xl font-semibold text-blue-400">
                                                                                    {page.name}
                                                                                </h3>
                                                                            </label>
                                                                        </div>
                                                                        <div class="mt-2 text-sm text-gray-300">
                                                                            <p>URL: {page.absolute_url}</p>
                                                                            <p>Status: <span class={getStatusClass(status)}>{status}</span></p>
                                                                            <p>Created: {formatDate(page.createdAt)}</p>
                                                                            <p>Updated: {formatDate(page.updatedAt)}</p>
                                                                            {page.archivedAt && !page.archivedAt.includes('1970') && 
                                                                                <p>Archived At: {formatDate(page.archivedAt)}</p>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                    <div class="flex flex-col space-y-2">
                                                                        <button 
                                                                            class="change-template-btn bg-blue-600 hover:bg-blue-700 text-white py-1 px-3 rounded transition duration-300"
                                                                            data-page-id={page.id}
                                                                            data-template-path={page.template_path}
                                                                        >
                                                                            Change Template
                                                                        </button>
                                                                        <button 
                                                                            class="change-domain-btn bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded transition duration-300"
                                                                            data-page-id={page.id}
                                                                        >
                                                                            Change Domain
                                                                        </button>
                                                                        <button 
                                                                            class="change-slug-btn bg-yellow-600 hover:bg-yellow-700 text-white py-1 px-3 rounded transition duration-300"
                                                                            data-page-id={page.id}
                                                                            data-current-url={page.absolute_url}
                                                                        >
                                                                            Change Slug
                                                                        </button>
                                                                        <a 
                                                                            href={page.absolute_url}
                                                                            target="_blank"
                                                                            rel="noopener noreferrer"
                                                                            class="bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded transition duration-300 text-center"
                                                                        >
                                                                            View Live Page
                                                                        </a>
                                                                        <a 
                                                                            href={`https://app.hubspot.com/pages/${portalId}/editor/${page.id}`}
                                                                            target="_blank"
                                                                            rel="noopener noreferrer"
                                                                            class="bg-purple-600 hover:bg-purple-700 text-white py-1 px-3 rounded transition duration-300 text-center"
                                                                        >
                                                                            Edit in HubSpot
                                                                        </a>
                                                                        {page.archived && (
                                                                            <button 
                                                                                class="restore-page-btn bg-orange-500 hover:bg-orange-600 text-white py-1 px-3 rounded transition duration-300"
                                                                                data-page-id={page.id}
                                                                            >
                                                                                Restore Page
                                                                            </button>
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            </li>
                                                        );
                                                    })}
                                                </ul>
                                            </details>
                                        </li>
                                    ))}
                                </ul>
                            </details>
                        </li>
                    ))}
                </ul>
            </div>
        )
    ))}
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const templateCheckboxes = document.querySelectorAll('.template-checkbox');
        const pageCheckboxes = document.querySelectorAll('.page-checkbox');
        const changeSelectedBtn = document.getElementById('changeSelectedBtn');
        const changeSelectedDomainsBtn = document.getElementById('changeSelectedDomainsBtn');
        const changeSelectedSlugsBtn = document.getElementById('changeSelectedSlugsBtn');

        function updateButtonStates() {
            const anyChecked = Array.from(pageCheckboxes).some(checkbox => (checkbox as HTMLInputElement).checked);
            if (changeSelectedBtn) changeSelectedBtn.disabled = !anyChecked;
            if (changeSelectedDomainsBtn) changeSelectedDomainsBtn.disabled = !anyChecked;
            if (changeSelectedSlugsBtn) changeSelectedSlugsBtn.disabled = !anyChecked;
        }

        templateCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const templateCheckbox = e.target as HTMLInputElement;
                const templateDetails = templateCheckbox.closest('details');
                if (!templateDetails) return;

                const pageCheckboxes = templateDetails.querySelectorAll('.page-checkbox');
                pageCheckboxes.forEach(checkbox => {
                    (checkbox as HTMLInputElement).checked = templateCheckbox.checked;
                });
                updateButtonStates();
            });
        });

        pageCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const pageCheckbox = e.target as HTMLInputElement;
                const templateDetails = pageCheckbox.closest('details');
                if (!templateDetails) return;

                const templateCheckbox = templateDetails.querySelector('.template-checkbox') as HTMLInputElement;
                const pageCheckboxes = templateDetails.querySelectorAll('.page-checkbox');
                
                const allChecked = Array.from(pageCheckboxes)
                    .every(checkbox => (checkbox as HTMLInputElement).checked);
                
                if (templateCheckbox) {
                    templateCheckbox.checked = allChecked;
                }
                
                updateButtonStates();
            });
        });

        // Initialize button states
        updateButtonStates();
    });
</script>

<style>
    .custom-checkbox {
        appearance: none;
        -webkit-appearance: none;
        width: 1.5rem;
        height: 1.5rem;
        border: 2px solid #4a5568;
        border-radius: 0.25rem;
        background-color: #2d3748;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        margin-right: 0.5rem;
        transition: all 0.2s ease-in-out;
    }

    .custom-checkbox:checked {
        background-color: #553c9a;
        border-color: #9f7aea;
    }

    .custom-checkbox:checked::after {
        content: '\2714';
        color: white;
        font-size: 14px;
        font-weight: bold;
    }

    .custom-checkbox:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
    }

    .custom-checkbox:hover {
        border-color: #4299e1;
    }
</style>