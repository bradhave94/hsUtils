---
import { checkAuth } from '../lib/middleware/auth';
import { getAuthUrl } from '../lib/auth';

const authUrl = getAuthUrl();
const auth = await checkAuth(Astro.cookies);
const { pathname } = Astro.url;

// Get the cache enabled preference from cookie
const cacheEnabled = Astro.cookies.get('cache-enabled')?.boolean() ?? false;
---

<nav class="bg-gray-800 text-white p-4">
  <div class="container mx-auto flex justify-between items-center">
    <div class="flex items-center space-x-4">
      <a href="/" class="text-xl font-bold text-orange-500">HubSpot Utils</a>

      {auth.portalId && <span class="text-sm text-gray-400">
        <a href={authUrl} class="hover:text-orange-500 transition-colors">Portal ID: {auth.portalId}</a>
      </span>}
    </div>
    <div class="flex items-center justify-center space-x-4">
      <a href="/pages" class="hover:text-orange-500 transition-colors">Pages</a>
      <a href="/blog-posts" class="hover:text-orange-500 transition-colors">Blog Posts</a>
      <a href="/modules" class="hover:text-orange-500 transition-colors">Modules</a>
      <a href="/redirects" class="hover:text-orange-500 transition-colors">Redirects</a>

      <div class="flex items-center space-x-2">
        <label class="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            id="cacheToggle"
            class="sr-only peer"
            checked={cacheEnabled}
          >
          <div class="w-9 h-5 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-orange-500"></div>
          <span class="ml-2 text-sm text-gray-300">Enable Caching</span>
        </label>
      </div>

      {cacheEnabled && (
        <button
          id="clearAllCache"
          class="text-gray-400 hover:text-orange-500 transition-colors h-6 flex items-center"
          title="Clear Cache"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
        </button>
      )}
    </div>
  </div>
</nav>

<script>
    // Cache clear button handler
    document.getElementById('clearAllCache')?.addEventListener('click', async () => {
        try {
            const accessToken = document.querySelector('meta[name="access-token"]')?.getAttribute('content');

            await fetch('/api/invalidate-cache', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    accessToken,
                    type: null // This will trigger invalidateAll
                })
            });

            location.reload();
        } catch (error) {
            console.error('Failed to clear cache:', error);
            alert('Failed to clear cache. Please try again.');
        }
    });

    // Cache toggle handler
    document.getElementById('cacheToggle')?.addEventListener('change', async (e) => {
        const isEnabled = (e.target as HTMLInputElement).checked;

        // Set cookie with 30 day expiration
        document.cookie = `cache-enabled=${isEnabled}; path=/; max-age=${60 * 60 * 24 * 30}`;

        // Reload the page to apply the new cache setting
        location.reload();
    });
</script>