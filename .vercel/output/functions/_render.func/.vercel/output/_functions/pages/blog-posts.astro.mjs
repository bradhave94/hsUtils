/* empty css                                      */
import { c as createComponent, r as renderTemplate, g as defineScriptVars, a as addAttribute, m as maybeRenderHead, e as createAstro, f as renderComponent } from '../chunks/astro/server_QBnrvN_q.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_D4YqzTMS.mjs';
import 'clsx';
/* empty css                                      */
import { $ as $$TemplateModal, a as $$DomainModal } from '../chunks/DomainModal_BloStABa.mjs';
import { i as getBlogPosts, j as getBlogInfo, e as getDomains } from '../chunks/api_D5lN87jw.mjs';
export { renderers } from '../renderers.mjs';

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro();
const $$BlogTree = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$BlogTree;
  const { posts, blogInfo } = Astro2.props;
  const portalId = Astro2.cookies.get("hubspot_portal_id")?.value;
  function getStatusLabel(post) {
    if (post.archivedAt !== 0) return "Archived";
    switch (post.state || "DRAFT") {
      case "PUBLISHED":
        return "Published";
      case "DRAFT":
        return "Draft";
      case "SCHEDULED":
        return "Scheduled";
      case "PUBLISHED_OR_SCHEDULED":
        return "Published";
      default:
        return post.state || "Draft";
    }
  }
  function getStatusClass(status) {
    switch (status.toLowerCase()) {
      case "published":
        return "text-green-500";
      case "draft":
        return "text-yellow-500";
      case "archived":
        return "text-red-500";
      case "scheduled":
        return "text-blue-500";
      default:
        return "text-gray-500";
    }
  }
  function formatDate(dateString) {
    if (!dateString || dateString === "1970-01-01T00:00:00Z" || dateString == 0) {
      return "N/A";
    }
    return new Date(dateString).toLocaleString();
  }
  const groupedPosts = blogInfo.reduce((acc, blog) => {
    const blogPosts = posts.filter((post) => post.url?.includes(blog.url));
    blogPosts.sort((a, b) => {
      const getStatusOrder = (post) => {
        if (post.archivedAt != 0) return 2;
        if (post.state === "DRAFT") return 1;
        return 0;
      };
      const aOrder = getStatusOrder(a);
      const bOrder = getStatusOrder(b);
      if (aOrder !== bOrder) {
        return aOrder - bOrder;
      }
      return (a.name || "").localeCompare(b.name || "");
    });
    acc[blog.url] = blogPosts;
    return acc;
  }, {});
  const noBlogPosts = posts.filter(
    (post) => !blogInfo.some((blog) => post.url?.includes(blog.url))
  );
  noBlogPosts.sort((a, b) => {
    const getStatusOrder = (post) => {
      if (post.archivedAt != 0) return 2;
      if (post.state === "DRAFT") return 1;
      return 0;
    };
    const aOrder = getStatusOrder(a);
    const bOrder = getStatusOrder(b);
    if (aOrder !== bOrder) {
      return aOrder - bOrder;
    }
    return (a.name || "").localeCompare(b.name || "");
  });
  groupedPosts["No Blog"] = noBlogPosts;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<div class="page-tree-container" data-astro-cid-bf55uk7y> <div class="flex space-x-4 mb-4" data-astro-cid-bf55uk7y> <button id="changeSelectedBtn" class="change-selected-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Template\n</button> <button id="changeSelectedDomainsBtn" class="change-selected-btn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Domains\n</button> <button id="changeSelectedSlugsBtn" class="change-selected-btn bg-yellow-600 hover:bg-yellow-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Slugs\n</button> </div> <ul class="space-y-3" data-astro-cid-bf55uk7y> ', ' </ul> </div> <dialog id="slugModal" class="bg-gray-800 p-6 rounded-lg shadow-xl text-white w-[800px]" data-astro-cid-bf55uk7y> <div class="flex justify-between items-center mb-4" data-astro-cid-bf55uk7y> <h3 class="text-xl font-bold" data-astro-cid-bf55uk7y>Change URL Slugs</h3> <button class="close-modal-btn text-gray-400 hover:text-white" data-astro-cid-bf55uk7y>&times;</button> </div> <div class="space-y-4" data-astro-cid-bf55uk7y> <div class="flex space-x-2" data-astro-cid-bf55uk7y> <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded" data-pattern="#^(.*)$#subroute/$1" data-astro-cid-bf55uk7y>Add Subroute</button> <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded" data-pattern="#find(.*)$#replace$1" data-astro-cid-bf55uk7y>Replace Section</button> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Pattern</label> <input type="text" id="patternInput" class="w-full p-2 bg-gray-700 rounded" placeholder="#pattern#replacement" data-astro-cid-bf55uk7y> <div class="mt-1 text-sm text-gray-400" data-astro-cid-bf55uk7y>\nExamples:\n<ul class="list-disc list-inside ml-2 space-y-1" data-astro-cid-bf55uk7y> <li data-astro-cid-bf55uk7y>#^(.*)$#subroute/$1 \u2192 adds subroute/ to start</li> <li data-astro-cid-bf55uk7y>#find(.*)$#replace$1 \u2192 changes /find to /replace</li> <li data-astro-cid-bf55uk7y>Use $1 to reference captured content</li> </ul> </div> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Current URLs</label> <textarea id="currentUrls" class="w-full h-32 p-2 bg-gray-700 rounded" readonly data-astro-cid-bf55uk7y></textarea> <button class="copy-urls-btn mt-1 text-sm text-blue-400 hover:text-blue-300" data-astro-cid-bf55uk7y>Copy URLs</button> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Preview</label> <textarea id="previewUrls" class="w-full h-32 p-2 bg-gray-700 rounded" readonly data-astro-cid-bf55uk7y></textarea> </div> <div class="flex justify-end space-x-3 mt-4" data-astro-cid-bf55uk7y> <button class="close-modal-btn bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded" data-astro-cid-bf55uk7y>Cancel</button> <button id="applyChangesBtn" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded" data-astro-cid-bf55uk7y>Apply Changes</button> </div> </div> </dialog>  <script>(function(){', "\n    document.addEventListener('DOMContentLoaded', () => {\n        const blogCheckboxes = document.querySelectorAll('.blog-checkbox');\n        const postCheckboxes = document.querySelectorAll('.post-checkbox');\n        const changeSelectedBtn = document.getElementById('changeSelectedBtn');\n        const changeSelectedDomainsBtn = document.getElementById('changeSelectedDomainsBtn');\n        const changeSelectedSlugsBtn = document.getElementById('changeSelectedSlugsBtn');\n\n        // Handle blog checkbox changes\n        blogCheckboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const blogDetails = (e.target).closest('details');\n                const postCheckboxes = blogDetails?.querySelectorAll('.post-checkbox');\n                const isChecked = (e.target).checked;\n\n                postCheckboxes?.forEach((cb) => {\n                    (cb).checked = isChecked;\n                });\n\n                updateChangeSelectedButtons();\n            });\n        });\n\n        // Handle post checkbox changes\n        postCheckboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const blogDetails = (e.target).closest('details');\n                const blogCheckbox = blogDetails?.querySelector('.blog-checkbox');\n                const postCheckboxes = blogDetails?.querySelectorAll('.post-checkbox');\n\n                if (postCheckboxes) {\n                    const allChecked = Array.from(postCheckboxes)\n                        .every((cb) => (cb).checked);\n                    const someChecked = Array.from(postCheckboxes)\n                        .some((cb) => (cb).checked);\n\n                    if (blogCheckbox) {\n                        blogCheckbox.checked = allChecked;\n                        blogCheckbox.indeterminate = someChecked && !allChecked;\n                    }\n                }\n\n                updateChangeSelectedButtons();\n            });\n        });\n\n        function updateChangeSelectedButtons() {\n            const anyChecked = Array.from(postCheckboxes)\n                .some((cb) => (cb).checked);\n\n            if (changeSelectedBtn) {\n                (changeSelectedBtn).disabled = !anyChecked;\n            }\n            if (changeSelectedDomainsBtn) {\n                (changeSelectedDomainsBtn).disabled = !anyChecked;\n            }\n            if (changeSelectedSlugsBtn) {\n                (changeSelectedSlugsBtn).disabled = !anyChecked;\n            }\n        }\n\n        // Handle Change Selected Template\n        changeSelectedBtn?.addEventListener('click', async () => {\n            const selectedPostIds = Array.from(document.querySelectorAll('.post-checkbox:checked'))\n                .map(checkbox => checkbox.getAttribute('data-post-id'))\n                .filter(id => id !== null);\n\n            if (selectedPostIds.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            const newTemplatePath = await window.openTemplateModal(selectedPostIds, 'Multiple');\n            if (newTemplatePath) {\n                try {\n                    await apiCall('/api/templates/change-blog', {\n                        inputs: selectedPostIds.map(id => ({\n                            id,\n                            templatePath: newTemplatePath\n                        }))\n                    });\n                    alert('Templates updated successfully!');\n                    location.reload();\n                } catch (error) {\n                    console.error('Error updating templates:', error);\n                    alert('Failed to update templates. Please try again.');\n                }\n            }\n        });\n\n        // Handle Change Selected Domains\n        changeSelectedDomainsBtn?.addEventListener('click', async () => {\n            const selectedPostIds = Array.from(document.querySelectorAll('.post-checkbox:checked'))\n                .map(checkbox => checkbox.getAttribute('data-post-id'))\n                .filter(id => id !== null);\n\n            if (selectedPostIds.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            try {\n                const newDomain = await window.openDomainModal('multiple');\n                if (newDomain) {\n                    const results = await Promise.allSettled(\n                        selectedPostIds.map(async (postId) => {\n                            const response = await fetch('/api/domains/change', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({\n                                    pageId: postId,\n                                    domain: newDomain\n                                }),\n                            });\n\n                            if (!response.ok) {\n                                const data = await response.json();\n                                throw new Error(data.message || 'Failed to update domain');\n                            }\n\n                            return response.json();\n                        })\n                    );\n\n                    const successful = results.filter(result => result.status === 'fulfilled').length;\n                    const failed = results.filter(result => result.status === 'rejected').length;\n\n                    if (failed === 0) {\n                        alert(`Successfully updated domain for all ${successful} posts!`);\n                    } else {\n                        alert(`Updated domain for ${successful} posts. Failed to update ${failed} posts.`);\n                    }\n\n                    location.reload();\n                }\n            } catch (error) {\n                console.error('Error updating domains:', error);\n                alert('An error occurred while updating domains. Please try again.');\n            }\n        });\n\n        // Handle Change Selected Slugs\n        changeSelectedSlugsBtn?.addEventListener('click', handleChangeSelectedSlugs);\n\n        // Handle individual slug changes\n        document.querySelectorAll('.change-slug-btn').forEach(btn => {\n            btn.addEventListener('click', handleChangeSlug);\n        });\n\n        // Handle individual domain changes\n        document.querySelectorAll('.change-domain-btn').forEach(btn => {\n            btn.addEventListener('click', async (e) => {\n                const target = e.target;\n                const postId = target.getAttribute('data-page-id');\n\n                if (!postId) {\n                    console.error('No post ID found');\n                    return;\n                }\n\n                try {\n                    const newDomain = await window.openDomainModal(postId);\n                    if (newDomain) {\n                        const response = await fetch('/api/domains/change', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                pageId: postId,\n                                domain: newDomain\n                            }),\n                        });\n\n                        if (!response.ok) {\n                            const data = await response.json();\n                            throw new Error(data.message || 'Failed to update domain');\n                        }\n\n                        alert('Domain updated successfully!');\n                        location.reload();\n                    }\n                } catch (error) {\n                    console.error('Error updating domain:', error);\n                    alert(error instanceof Error ? error.message : 'Failed to update domain. Please try again.');\n                }\n            });\n        });\n\n        // Slug Modal Functionality\n        async function handleChangeSlug(event) {\n            const target = event.target;\n            const postId = target.getAttribute('data-page-id');\n            const currentUrl = target.getAttribute('data-current-url');\n\n            if (!postId || !currentUrl) {\n                console.error('Missing post ID or URL');\n                return;\n            }\n\n            window.selectedPages = [{\n                pageId: postId,\n                currentUrl\n            }];\n\n            // Find the blog base URL and extract everything after it\n            const blogBasePath = blogInfo.find(b => currentUrl.includes(b.url))?.url;\n            const fullPath = blogBasePath ?\n                currentUrl.substring(currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\/+/, '') :\n                currentUrl.split('/').pop() || '';\n\n            const currentUrlsTextarea = document.getElementById('currentUrls');\n            currentUrlsTextarea.value = fullPath;  // Now shows \"it/news/replaceplace\"\n\n            const modal = document.getElementById('slugModal');\n            modal.showModal();\n\n            setupSlugModal();\n        }\n\n        async function handleChangeSelectedSlugs() {\n            const selectedCheckboxes = document.querySelectorAll('.post-checkbox:checked');\n            const selectedPages = Array.from(selectedCheckboxes)\n                .map(checkbox => {\n                    const postId = checkbox.getAttribute('data-post-id');\n                    const currentUrl = checkbox.closest('.post')?.querySelector('p')?.textContent?.replace('URL: ', '');\n                    return { pageId: postId, currentUrl };\n                })\n                .filter(page =>\n                    page.pageId !== null && page.currentUrl !== undefined\n                );\n\n            if (selectedPages.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            window.selectedPages = selectedPages;\n\n            // Extract paths after blog base URL for each selected post\n            const currentUrlsTextarea = document.getElementById('currentUrls');\n            currentUrlsTextarea.value = selectedPages\n                .map(p => {\n                    const blogBasePath = blogInfo.find(b => p.currentUrl.includes(b.url))?.url;\n                    return blogBasePath ?\n                        p.currentUrl.substring(p.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\/+/, '') :\n                        p.currentUrl.split('/').pop() || '';\n                })\n                .join('\\n');\n\n            const modal = document.getElementById('slugModal');\n            modal.showModal();\n\n            setupSlugModal();\n        }\n\n        function setupSlugModal() {\n            const modal = document.getElementById('slugModal');\n            const patternInput = document.getElementById('patternInput');\n            const previewUrls = document.getElementById('previewUrls');\n            const applyChangesBtn = document.getElementById('applyChangesBtn');\n            const closeModalBtns = document.querySelectorAll('.close-modal-btn');\n            const copyUrlsBtn = document.querySelector('.copy-urls-btn');\n            const patternBtns = document.querySelectorAll('.pattern-btn');\n\n            // Pattern buttons\n            patternBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    const pattern = btn.getAttribute('data-pattern');\n                    if (pattern && patternInput) {\n                        patternInput.value = pattern;\n                        updatePreview();\n                    }\n                });\n            });\n\n            // Close modal buttons\n            closeModalBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    modal.close();\n                });\n            });\n\n            // Copy URLs button\n            copyUrlsBtn?.addEventListener('click', () => {\n                const currentUrls = document.getElementById('currentUrls');\n                currentUrls.select();\n                document.execCommand('copy');\n                (copyUrlsBtn).textContent = 'Copied!';\n                setTimeout(() => {\n                    (copyUrlsBtn).textContent = 'Copy URLs';\n                }, 2000);\n            });\n\n            // Pattern input\n            patternInput?.addEventListener('input', updatePreview);\n\n            function updatePreview() {\n                try {\n                    const patternValue = patternInput.value;\n                    const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];\n\n                    if (!pattern || replacement === undefined) {\n                        previewUrls.value = 'Invalid pattern format. Use #pattern#replacement';\n                        return;\n                    }\n\n                    const regex = new RegExp(pattern);\n                    const previews = window.selectedPages.map(page => {\n                        // Get the blog base URL\n                        const blogBasePath = blogInfo.find(b => page.currentUrl.includes(b.url))?.url;\n                        // Extract everything after the blog base URL\n                        const currentSlug = blogBasePath ?\n                            page.currentUrl.substring(page.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\/+/, '') :\n                            page.currentUrl.split('/').pop() || '';\n\n                        // Apply the pattern only to the slug\n                        let newSlug = currentSlug.replace(regex, replacement)\n                            .replace(/^\\/|\\/$/g, ''); // Only remove leading/trailing slashes, preserve internal ones\n\n                        return `${currentSlug} \u2192 ${newSlug}`;\n                    });\n\n                    previewUrls.value = previews.join('\\n');\n                } catch (error) {\n                    previewUrls.value = 'Invalid regex pattern: ' + (error instanceof Error ? error.message : 'Unknown error');\n                }\n            }\n\n            // Apply changes button\n            applyChangesBtn?.addEventListener('click', async () => {\n                const patternValue = patternInput.value;\n                const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];\n\n                if (!pattern || replacement === undefined) {\n                    alert('Invalid pattern format. Please use #pattern#replacement format.');\n                    return;\n                }\n\n                try {\n                    const regex = new RegExp(pattern);\n                    const results = await Promise.allSettled(\n                        window.selectedPages.map(async (page) => {\n                            // Get the blog base URL\n                            const blogBasePath = blogInfo.find(b => page.currentUrl.includes(b.url))?.url;\n                            // Extract everything after the blog base URL\n                            const currentSlug = blogBasePath ?\n                                page.currentUrl.substring(page.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\/+/, '') :\n                                page.currentUrl.split('/').pop() || '';\n\n                            // Apply the pattern to the full path\n                            let newSlug = currentSlug.replace(regex, replacement)\n                                .replace(/^\\/|\\/$/g, ''); // Only remove leading/trailing slashes, preserve internal ones\n\n                            const response = await fetch('/api/blog-posts/update-slug', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({\n                                    pageId: page.pageId,\n                                    newSlug\n                                }),\n                            });\n\n                            if (!response.ok) {\n                                const data = await response.json();\n                                throw new Error(data.message || 'Failed to update slug');\n                            }\n\n                            return response.json();\n                        })\n                    );\n\n                    const successful = results.filter(result => result.status === 'fulfilled').length;\n                    const failed = results.filter(result => result.status === 'rejected').length;\n\n                    if (failed === 0) {\n                        alert(`Successfully updated slugs for all ${successful} posts!`);\n                    } else {\n                        alert(`Updated slugs for ${successful} posts. Failed to update ${failed} posts.`);\n                    }\n\n                    modal.close();\n                    location.reload();\n                } catch (error) {\n                    console.error('Error updating slugs:', error);\n                    alert('Invalid regex pattern or error updating slugs. Please try again.');\n                }\n            });\n        }\n\n        async function apiCall(endpoint, data) {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data),\n            });\n            if (!response.ok) throw new Error('API call failed');\n            return response.json();\n        }\n    });\n})();<\/script>"], ["", '<div class="page-tree-container" data-astro-cid-bf55uk7y> <div class="flex space-x-4 mb-4" data-astro-cid-bf55uk7y> <button id="changeSelectedBtn" class="change-selected-btn bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Template\n</button> <button id="changeSelectedDomainsBtn" class="change-selected-btn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Domains\n</button> <button id="changeSelectedSlugsBtn" class="change-selected-btn bg-yellow-600 hover:bg-yellow-700 text-white py-2 px-4 rounded transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled data-astro-cid-bf55uk7y>\nChange Selected Slugs\n</button> </div> <ul class="space-y-3" data-astro-cid-bf55uk7y> ', ' </ul> </div> <dialog id="slugModal" class="bg-gray-800 p-6 rounded-lg shadow-xl text-white w-[800px]" data-astro-cid-bf55uk7y> <div class="flex justify-between items-center mb-4" data-astro-cid-bf55uk7y> <h3 class="text-xl font-bold" data-astro-cid-bf55uk7y>Change URL Slugs</h3> <button class="close-modal-btn text-gray-400 hover:text-white" data-astro-cid-bf55uk7y>&times;</button> </div> <div class="space-y-4" data-astro-cid-bf55uk7y> <div class="flex space-x-2" data-astro-cid-bf55uk7y> <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded" data-pattern="#^(.*)$#subroute/$1" data-astro-cid-bf55uk7y>Add Subroute</button> <button class="pattern-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded" data-pattern="#find(.*)$#replace$1" data-astro-cid-bf55uk7y>Replace Section</button> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Pattern</label> <input type="text" id="patternInput" class="w-full p-2 bg-gray-700 rounded" placeholder="#pattern#replacement" data-astro-cid-bf55uk7y> <div class="mt-1 text-sm text-gray-400" data-astro-cid-bf55uk7y>\nExamples:\n<ul class="list-disc list-inside ml-2 space-y-1" data-astro-cid-bf55uk7y> <li data-astro-cid-bf55uk7y>#^(.*)$#subroute/$1 \u2192 adds subroute/ to start</li> <li data-astro-cid-bf55uk7y>#find(.*)$#replace$1 \u2192 changes /find to /replace</li> <li data-astro-cid-bf55uk7y>Use $1 to reference captured content</li> </ul> </div> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Current URLs</label> <textarea id="currentUrls" class="w-full h-32 p-2 bg-gray-700 rounded" readonly data-astro-cid-bf55uk7y></textarea> <button class="copy-urls-btn mt-1 text-sm text-blue-400 hover:text-blue-300" data-astro-cid-bf55uk7y>Copy URLs</button> </div> <div data-astro-cid-bf55uk7y> <label class="block text-sm font-medium mb-1" data-astro-cid-bf55uk7y>Preview</label> <textarea id="previewUrls" class="w-full h-32 p-2 bg-gray-700 rounded" readonly data-astro-cid-bf55uk7y></textarea> </div> <div class="flex justify-end space-x-3 mt-4" data-astro-cid-bf55uk7y> <button class="close-modal-btn bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded" data-astro-cid-bf55uk7y>Cancel</button> <button id="applyChangesBtn" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded" data-astro-cid-bf55uk7y>Apply Changes</button> </div> </div> </dialog>  <script>(function(){', "\n    document.addEventListener('DOMContentLoaded', () => {\n        const blogCheckboxes = document.querySelectorAll('.blog-checkbox');\n        const postCheckboxes = document.querySelectorAll('.post-checkbox');\n        const changeSelectedBtn = document.getElementById('changeSelectedBtn');\n        const changeSelectedDomainsBtn = document.getElementById('changeSelectedDomainsBtn');\n        const changeSelectedSlugsBtn = document.getElementById('changeSelectedSlugsBtn');\n\n        // Handle blog checkbox changes\n        blogCheckboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const blogDetails = (e.target).closest('details');\n                const postCheckboxes = blogDetails?.querySelectorAll('.post-checkbox');\n                const isChecked = (e.target).checked;\n\n                postCheckboxes?.forEach((cb) => {\n                    (cb).checked = isChecked;\n                });\n\n                updateChangeSelectedButtons();\n            });\n        });\n\n        // Handle post checkbox changes\n        postCheckboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const blogDetails = (e.target).closest('details');\n                const blogCheckbox = blogDetails?.querySelector('.blog-checkbox');\n                const postCheckboxes = blogDetails?.querySelectorAll('.post-checkbox');\n\n                if (postCheckboxes) {\n                    const allChecked = Array.from(postCheckboxes)\n                        .every((cb) => (cb).checked);\n                    const someChecked = Array.from(postCheckboxes)\n                        .some((cb) => (cb).checked);\n\n                    if (blogCheckbox) {\n                        blogCheckbox.checked = allChecked;\n                        blogCheckbox.indeterminate = someChecked && !allChecked;\n                    }\n                }\n\n                updateChangeSelectedButtons();\n            });\n        });\n\n        function updateChangeSelectedButtons() {\n            const anyChecked = Array.from(postCheckboxes)\n                .some((cb) => (cb).checked);\n\n            if (changeSelectedBtn) {\n                (changeSelectedBtn).disabled = !anyChecked;\n            }\n            if (changeSelectedDomainsBtn) {\n                (changeSelectedDomainsBtn).disabled = !anyChecked;\n            }\n            if (changeSelectedSlugsBtn) {\n                (changeSelectedSlugsBtn).disabled = !anyChecked;\n            }\n        }\n\n        // Handle Change Selected Template\n        changeSelectedBtn?.addEventListener('click', async () => {\n            const selectedPostIds = Array.from(document.querySelectorAll('.post-checkbox:checked'))\n                .map(checkbox => checkbox.getAttribute('data-post-id'))\n                .filter(id => id !== null);\n\n            if (selectedPostIds.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            const newTemplatePath = await window.openTemplateModal(selectedPostIds, 'Multiple');\n            if (newTemplatePath) {\n                try {\n                    await apiCall('/api/templates/change-blog', {\n                        inputs: selectedPostIds.map(id => ({\n                            id,\n                            templatePath: newTemplatePath\n                        }))\n                    });\n                    alert('Templates updated successfully!');\n                    location.reload();\n                } catch (error) {\n                    console.error('Error updating templates:', error);\n                    alert('Failed to update templates. Please try again.');\n                }\n            }\n        });\n\n        // Handle Change Selected Domains\n        changeSelectedDomainsBtn?.addEventListener('click', async () => {\n            const selectedPostIds = Array.from(document.querySelectorAll('.post-checkbox:checked'))\n                .map(checkbox => checkbox.getAttribute('data-post-id'))\n                .filter(id => id !== null);\n\n            if (selectedPostIds.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            try {\n                const newDomain = await window.openDomainModal('multiple');\n                if (newDomain) {\n                    const results = await Promise.allSettled(\n                        selectedPostIds.map(async (postId) => {\n                            const response = await fetch('/api/domains/change', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({\n                                    pageId: postId,\n                                    domain: newDomain\n                                }),\n                            });\n\n                            if (!response.ok) {\n                                const data = await response.json();\n                                throw new Error(data.message || 'Failed to update domain');\n                            }\n\n                            return response.json();\n                        })\n                    );\n\n                    const successful = results.filter(result => result.status === 'fulfilled').length;\n                    const failed = results.filter(result => result.status === 'rejected').length;\n\n                    if (failed === 0) {\n                        alert(\\`Successfully updated domain for all \\${successful} posts!\\`);\n                    } else {\n                        alert(\\`Updated domain for \\${successful} posts. Failed to update \\${failed} posts.\\`);\n                    }\n\n                    location.reload();\n                }\n            } catch (error) {\n                console.error('Error updating domains:', error);\n                alert('An error occurred while updating domains. Please try again.');\n            }\n        });\n\n        // Handle Change Selected Slugs\n        changeSelectedSlugsBtn?.addEventListener('click', handleChangeSelectedSlugs);\n\n        // Handle individual slug changes\n        document.querySelectorAll('.change-slug-btn').forEach(btn => {\n            btn.addEventListener('click', handleChangeSlug);\n        });\n\n        // Handle individual domain changes\n        document.querySelectorAll('.change-domain-btn').forEach(btn => {\n            btn.addEventListener('click', async (e) => {\n                const target = e.target;\n                const postId = target.getAttribute('data-page-id');\n\n                if (!postId) {\n                    console.error('No post ID found');\n                    return;\n                }\n\n                try {\n                    const newDomain = await window.openDomainModal(postId);\n                    if (newDomain) {\n                        const response = await fetch('/api/domains/change', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                pageId: postId,\n                                domain: newDomain\n                            }),\n                        });\n\n                        if (!response.ok) {\n                            const data = await response.json();\n                            throw new Error(data.message || 'Failed to update domain');\n                        }\n\n                        alert('Domain updated successfully!');\n                        location.reload();\n                    }\n                } catch (error) {\n                    console.error('Error updating domain:', error);\n                    alert(error instanceof Error ? error.message : 'Failed to update domain. Please try again.');\n                }\n            });\n        });\n\n        // Slug Modal Functionality\n        async function handleChangeSlug(event) {\n            const target = event.target;\n            const postId = target.getAttribute('data-page-id');\n            const currentUrl = target.getAttribute('data-current-url');\n\n            if (!postId || !currentUrl) {\n                console.error('Missing post ID or URL');\n                return;\n            }\n\n            window.selectedPages = [{\n                pageId: postId,\n                currentUrl\n            }];\n\n            // Find the blog base URL and extract everything after it\n            const blogBasePath = blogInfo.find(b => currentUrl.includes(b.url))?.url;\n            const fullPath = blogBasePath ?\n                currentUrl.substring(currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\\\/+/, '') :\n                currentUrl.split('/').pop() || '';\n\n            const currentUrlsTextarea = document.getElementById('currentUrls');\n            currentUrlsTextarea.value = fullPath;  // Now shows \"it/news/replaceplace\"\n\n            const modal = document.getElementById('slugModal');\n            modal.showModal();\n\n            setupSlugModal();\n        }\n\n        async function handleChangeSelectedSlugs() {\n            const selectedCheckboxes = document.querySelectorAll('.post-checkbox:checked');\n            const selectedPages = Array.from(selectedCheckboxes)\n                .map(checkbox => {\n                    const postId = checkbox.getAttribute('data-post-id');\n                    const currentUrl = checkbox.closest('.post')?.querySelector('p')?.textContent?.replace('URL: ', '');\n                    return { pageId: postId, currentUrl };\n                })\n                .filter(page =>\n                    page.pageId !== null && page.currentUrl !== undefined\n                );\n\n            if (selectedPages.length === 0) {\n                alert('No posts selected. Please select at least one post.');\n                return;\n            }\n\n            window.selectedPages = selectedPages;\n\n            // Extract paths after blog base URL for each selected post\n            const currentUrlsTextarea = document.getElementById('currentUrls');\n            currentUrlsTextarea.value = selectedPages\n                .map(p => {\n                    const blogBasePath = blogInfo.find(b => p.currentUrl.includes(b.url))?.url;\n                    return blogBasePath ?\n                        p.currentUrl.substring(p.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\\\/+/, '') :\n                        p.currentUrl.split('/').pop() || '';\n                })\n                .join('\\\\n');\n\n            const modal = document.getElementById('slugModal');\n            modal.showModal();\n\n            setupSlugModal();\n        }\n\n        function setupSlugModal() {\n            const modal = document.getElementById('slugModal');\n            const patternInput = document.getElementById('patternInput');\n            const previewUrls = document.getElementById('previewUrls');\n            const applyChangesBtn = document.getElementById('applyChangesBtn');\n            const closeModalBtns = document.querySelectorAll('.close-modal-btn');\n            const copyUrlsBtn = document.querySelector('.copy-urls-btn');\n            const patternBtns = document.querySelectorAll('.pattern-btn');\n\n            // Pattern buttons\n            patternBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    const pattern = btn.getAttribute('data-pattern');\n                    if (pattern && patternInput) {\n                        patternInput.value = pattern;\n                        updatePreview();\n                    }\n                });\n            });\n\n            // Close modal buttons\n            closeModalBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    modal.close();\n                });\n            });\n\n            // Copy URLs button\n            copyUrlsBtn?.addEventListener('click', () => {\n                const currentUrls = document.getElementById('currentUrls');\n                currentUrls.select();\n                document.execCommand('copy');\n                (copyUrlsBtn).textContent = 'Copied!';\n                setTimeout(() => {\n                    (copyUrlsBtn).textContent = 'Copy URLs';\n                }, 2000);\n            });\n\n            // Pattern input\n            patternInput?.addEventListener('input', updatePreview);\n\n            function updatePreview() {\n                try {\n                    const patternValue = patternInput.value;\n                    const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];\n\n                    if (!pattern || replacement === undefined) {\n                        previewUrls.value = 'Invalid pattern format. Use #pattern#replacement';\n                        return;\n                    }\n\n                    const regex = new RegExp(pattern);\n                    const previews = window.selectedPages.map(page => {\n                        // Get the blog base URL\n                        const blogBasePath = blogInfo.find(b => page.currentUrl.includes(b.url))?.url;\n                        // Extract everything after the blog base URL\n                        const currentSlug = blogBasePath ?\n                            page.currentUrl.substring(page.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\\\/+/, '') :\n                            page.currentUrl.split('/').pop() || '';\n\n                        // Apply the pattern only to the slug\n                        let newSlug = currentSlug.replace(regex, replacement)\n                            .replace(/^\\\\/|\\\\/$/g, ''); // Only remove leading/trailing slashes, preserve internal ones\n\n                        return \\`\\${currentSlug} \u2192 \\${newSlug}\\`;\n                    });\n\n                    previewUrls.value = previews.join('\\\\n');\n                } catch (error) {\n                    previewUrls.value = 'Invalid regex pattern: ' + (error instanceof Error ? error.message : 'Unknown error');\n                }\n            }\n\n            // Apply changes button\n            applyChangesBtn?.addEventListener('click', async () => {\n                const patternValue = patternInput.value;\n                const [, pattern, replacement] = patternValue.match(/#(.+?)#(.*)/) || [];\n\n                if (!pattern || replacement === undefined) {\n                    alert('Invalid pattern format. Please use #pattern#replacement format.');\n                    return;\n                }\n\n                try {\n                    const regex = new RegExp(pattern);\n                    const results = await Promise.allSettled(\n                        window.selectedPages.map(async (page) => {\n                            // Get the blog base URL\n                            const blogBasePath = blogInfo.find(b => page.currentUrl.includes(b.url))?.url;\n                            // Extract everything after the blog base URL\n                            const currentSlug = blogBasePath ?\n                                page.currentUrl.substring(page.currentUrl.indexOf(blogBasePath) + blogBasePath.length).replace(/^\\\\/+/, '') :\n                                page.currentUrl.split('/').pop() || '';\n\n                            // Apply the pattern to the full path\n                            let newSlug = currentSlug.replace(regex, replacement)\n                                .replace(/^\\\\/|\\\\/$/g, ''); // Only remove leading/trailing slashes, preserve internal ones\n\n                            const response = await fetch('/api/blog-posts/update-slug', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({\n                                    pageId: page.pageId,\n                                    newSlug\n                                }),\n                            });\n\n                            if (!response.ok) {\n                                const data = await response.json();\n                                throw new Error(data.message || 'Failed to update slug');\n                            }\n\n                            return response.json();\n                        })\n                    );\n\n                    const successful = results.filter(result => result.status === 'fulfilled').length;\n                    const failed = results.filter(result => result.status === 'rejected').length;\n\n                    if (failed === 0) {\n                        alert(\\`Successfully updated slugs for all \\${successful} posts!\\`);\n                    } else {\n                        alert(\\`Updated slugs for \\${successful} posts. Failed to update \\${failed} posts.\\`);\n                    }\n\n                    modal.close();\n                    location.reload();\n                } catch (error) {\n                    console.error('Error updating slugs:', error);\n                    alert('Invalid regex pattern or error updating slugs. Please try again.');\n                }\n            });\n        }\n\n        async function apiCall(endpoint, data) {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data),\n            });\n            if (!response.ok) throw new Error('API call failed');\n            return response.json();\n        }\n    });\n})();<\/script>"])), maybeRenderHead(), Object.entries(groupedPosts).map(([blogUrl, posts2]) => renderTemplate`<li class="blog-group" data-astro-cid-bf55uk7y> <details class="bg-gray-800 rounded-lg p-4 open" data-astro-cid-bf55uk7y> <summary class="flex items-center justify-between cursor-pointer" data-astro-cid-bf55uk7y> <div class="flex items-center" data-astro-cid-bf55uk7y> <input type="checkbox" class="blog-checkbox custom-checkbox mr-2"${addAttribute(blogUrl, "data-blog-url")} data-astro-cid-bf55uk7y> <span class="text-xl font-semibold text-white" data-astro-cid-bf55uk7y>${blogUrl}</span> <span class="ml-2 text-sm text-blue-400" data-astro-cid-bf55uk7y>(${posts2.length} posts)</span> </div> </summary> <ul class="mt-4 space-y-4" data-astro-cid-bf55uk7y> ${posts2.map((post) => {
    const status = getStatusLabel(post);
    return renderTemplate`<li class="post bg-gray-700 rounded-lg p-4" data-astro-cid-bf55uk7y> <div class="flex items-center justify-between" data-astro-cid-bf55uk7y> <div class="flex-grow" data-astro-cid-bf55uk7y> <div class="flex items-center" data-astro-cid-bf55uk7y> <label class="flex items-center cursor-pointer" data-astro-cid-bf55uk7y> <input type="checkbox" class="post-checkbox custom-checkbox mr-2 aspect-square"${addAttribute(post.id, "data-post-id")}${addAttribute(post.templatePath, "data-template-path")} data-astro-cid-bf55uk7y> <h3 class="text-2xl font-semibold text-blue-400 leading-none" data-astro-cid-bf55uk7y> ${post.name} </h3> </label> </div> <div class="mt-2 text-sm text-gray-300" data-astro-cid-bf55uk7y> <p data-astro-cid-bf55uk7y>URL: ${post.url}</p> <p data-astro-cid-bf55uk7y>Status: <span${addAttribute(getStatusClass(status), "class")} data-astro-cid-bf55uk7y>${status}</span></p> <p data-astro-cid-bf55uk7y>Created: ${formatDate(post.created || "")}</p> <p data-astro-cid-bf55uk7y>Updated: ${formatDate(post.updated ? post.updated.toString() : "")}</p> ${post.archivedAt != 0 && renderTemplate`<p data-astro-cid-bf55uk7y>Archived: ${formatDate(post.archivedAt)}</p>`} </div> </div> <div class="flex flex-col space-y-2 min-w-[200px] ml-24" data-astro-cid-bf55uk7y> <button class="change-template-btn bg-blue-600 hover:bg-blue-700 text-white py-1 px-3 rounded transition duration-300"${addAttribute(post.id, "data-page-id")}${addAttribute(post.templatePath, "data-template-path")} data-astro-cid-bf55uk7y>
Change Template
</button> <button class="change-domain-btn bg-red-600 hover:bg-blue-700 text-white py-1 px-3 rounded transition duration-300"${addAttribute(post.id, "data-page-id")} data-astro-cid-bf55uk7y>
Change Domain
</button> <button class="change-slug-btn bg-yellow-600 hover:bg-yellow-700 text-white py-1 px-3 rounded transition duration-300"${addAttribute(post.id, "data-page-id")}${addAttribute(post.url, "data-current-url")} data-astro-cid-bf55uk7y>
Change Slug
</button> <a${addAttribute(post.url, "href")} target="_blank" rel="noopener noreferrer" class="bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded transition duration-300 text-center" data-astro-cid-bf55uk7y>
View Live Post
</a> <a${addAttribute(`https://app.hubspot.com/blog/${portalId}/editor/${post.id}/content`, "href")} target="_blank" rel="noopener noreferrer" class="bg-purple-600 hover:bg-purple-700 text-white py-1 px-3 rounded transition duration-300 text-center" data-astro-cid-bf55uk7y>
Edit in HubSpot
</a> ${post.archivedAt != 0 && renderTemplate`<button class="restore-page-btn bg-orange-500 hover:bg-orange-600 text-white py-1 px-3 rounded transition duration-300"${addAttribute(post.id, "data-page-id")} data-astro-cid-bf55uk7y>
Restore Post
</button>`} </div> </div> </li>`;
  })} </ul> </details> </li>`), defineScriptVars({ blogInfo }));
}, "C:/Users/bradhave/Documents/workspace/hubspot/api/hsUtils/src/components/BlogTree.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const prerender = false;
const $$BlogPosts = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$BlogPosts;
  let posts = [];
  let blogInfo = [];
  let error = "";
  const accessTokenCookie = Astro2.cookies.get("hubspot_access_token");
  const accessToken = accessTokenCookie ? accessTokenCookie.value : null;
  const portalIdCookie = Astro2.cookies.get("hubspot_portal_id");
  const portalId = portalIdCookie ? portalIdCookie.value : null;
  if (!accessToken || !portalId) {
    return Astro2.redirect("/?error=missing_credentials");
  }
  try {
    [posts, blogInfo] = await Promise.all([
      getBlogPosts(accessToken),
      getBlogInfo(accessToken)
    ]);
  } catch (err) {
    console.error("Error fetching blog data:", err);
    error = `Failed to fetch blog data: ${err instanceof Error ? err.message : "Unknown error"}`;
  }
  const API_ENDPOINTS = {
    changeTemplate: "/api/templates/change-blog",
    updateBatch: "/api/blog-posts/update-batch",
    restoreBlogPost: "/api/blog-posts/restore"
  };
  await getDomains(accessToken);
  return renderTemplate(_a || (_a = __template(["", " <script>(function(){", "\n    document.addEventListener('DOMContentLoaded', () => {\n        async function apiCall(endpoint, data) {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data),\n            });\n            if (!response.ok) throw new Error('API call failed');\n            return response.json();\n        }\n\n        // Single post template change\n        document.querySelectorAll('.change-template-btn').forEach(btn => {\n            btn.addEventListener('click', async () => {\n                const { pageId, templatePath: currentTemplatePath } = btn.dataset;\n                const newTemplatePath = await window.openTemplateModal(pageId, currentTemplatePath);\n                if (newTemplatePath) {\n                    try {\n                        await apiCall(API_ENDPOINTS.changeTemplate, { pageId, templatePath: newTemplatePath });\n                        alert('Template updated successfully!');\n                        location.reload();\n                    } catch (error) {\n                        console.error('Failed to update template:', error);\n                        alert('Failed to update template. Please try again.');\n                    }\n                }\n            });\n        });\n\n        // Change all templates in a template group\n        document.querySelectorAll('.change-all-templates-btn').forEach(btn => {\n            btn.addEventListener('click', async (e) => {\n                e.stopPropagation();\n                const { templatePath } = btn.dataset;\n                const postIds = Array.from(btn.closest('details').querySelectorAll('.change-template-btn'))\n                    .map(btn => btn.getAttribute('data-page-id'));\n\n                const newTemplatePath = await window.openTemplateModal(postIds, templatePath);\n                if (newTemplatePath) {\n                    try {\n                        await apiCall(API_ENDPOINTS.updateBatch, {\n                            inputs: postIds.map(id => ({ id, templatePath: newTemplatePath }))\n                        });\n                        alert('Templates updated successfully!');\n                        location.reload();\n                    } catch (error) {\n                        console.error('Failed to update templates:', error);\n                        alert('Failed to update templates. Please try again.');\n                    }\n                }\n            });\n        });\n\n        // Restore archived post\n        document.querySelectorAll('.restore-page-btn').forEach(btn => {\n            btn.addEventListener('click', async () => {\n                const { pageId } = btn.dataset;\n                if (pageId) {\n                    try {\n                        const result = await apiCall(API_ENDPOINTS.restoreBlogPost, { pageId });\n                        if (result.success) {\n                            alert('Blog post restored successfully!');\n                            location.reload();\n                        } else {\n                            throw new Error(result.error || 'Failed to restore blog post');\n                        }\n                    } catch (error) {\n                        console.error('Failed to restore blog post:', error);\n                        alert('Failed to restore blog post. Please try again.');\n                    }\n                }\n            });\n        });\n    });\n})();<\/script>"])), renderComponent($$result, "Layout", $$Layout, { "title": "HubSpot Blog Posts" }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main class="container mx-auto max-w-4xl px-4 py-8"> <h1 class="text-4xl font-bold mb-8 text-blue-200">HubSpot Blog Posts <span class="text-xl text-blue-500">(${posts.length} posts)</span></h1> <p class="text-sm max-w-xl mb-6 text-blue-100">Posts are grouped by blog. Click a template to change all posts in that blog. Click a post to change that post's template.</p> ${error && renderTemplate`<p class="text-red-500 mb-6 p-4 bg-red-100 rounded-lg">${error}</p>`} ${posts.length === 0 ? renderTemplate`<p class="text-gray-400 text-xl">No blog posts found. ${error ? "An error occurred while fetching blog posts." : ""}</p>` : renderTemplate`${renderComponent($$result2, "BlogTree", $$BlogTree, { "posts": posts, "blogInfo": blogInfo })}`} <a href="/" class="inline-block mt-8 bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">Back to Home</a> </main> ${renderComponent($$result2, "TemplateModal", $$TemplateModal, {})} ${renderComponent($$result2, "DomainModal", $$DomainModal, {})} ` }), defineScriptVars({ API_ENDPOINTS }));
}, "C:/Users/bradhave/Documents/workspace/hubspot/api/hsUtils/src/pages/blog-posts.astro", void 0);

const $$file = "C:/Users/bradhave/Documents/workspace/hubspot/api/hsUtils/src/pages/blog-posts.astro";
const $$url = "/blog-posts";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$BlogPosts,
    file: $$file,
    prerender,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
