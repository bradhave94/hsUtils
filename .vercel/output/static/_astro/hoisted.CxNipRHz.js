import"./hoisted.Dh8oDUM8.js";document.addEventListener("DOMContentLoaded",()=>{const B=document.querySelectorAll(".change-template-btn"),U=document.querySelectorAll(".change-domain-btn"),T=document.querySelectorAll(".template-checkbox"),b=document.querySelectorAll(".page-checkbox"),y=document.getElementById("changeSelectedBtn"),w=document.getElementById("changeSelectedDomainsBtn"),E=document.getElementById("changeSelectedSlugsBtn");B.forEach(e=>{e.addEventListener("click",A)}),U.forEach(e=>{e.addEventListener("click",L)}),T.forEach(e=>{e.addEventListener("change",j)}),b.forEach(e=>{e.addEventListener("change",D)}),y?.addEventListener("click",$),w?.addEventListener("click",O),E?.addEventListener("click",R);async function A(e){const t=e.target.getAttribute("data-page-id"),a=e.target.getAttribute("data-template-path"),n=await window.openTemplateModal([t],a);n&&await q(t,n)}async function L(e){const a=e.target.getAttribute("data-page-id");if(!a){console.error("No page ID found");return}try{const n=await window.openDomainModal(a);if(n){console.log("newDomain",n,a);const r=await fetch("/api/domains/change",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:a,domain:n})}),l=await r.json();if(!r.ok)throw new Error(l.message||"Failed to update domain");alert("Domain updated successfully!"),location.reload()}}catch(n){console.error("Error updating domain:",n),alert(n instanceof Error?n.message:"Failed to update domain. Please try again.")}}function j(e){const t=e.target;t.closest("details").querySelectorAll(".page-checkbox").forEach(r=>{r.checked=t.checked}),I()}function D(e){const a=e.target.closest("details"),n=a.querySelector(".template-checkbox"),r=a.querySelectorAll(".page-checkbox"),l=Array.from(r).every(s=>s.checked);n.checked=l,I()}function I(){const e=Array.from(b).some(t=>t.checked);y&&(y.disabled=!e),w&&(w.disabled=!e),E&&(E.disabled=!e)}async function $(){const e=Array.from(document.querySelectorAll(".page-checkbox:checked")).map(a=>a.getAttribute("data-page-id"));if(e.length===0){alert("No pages selected. Please select at least one page.");return}const t=await window.openTemplateModal(e,"Multiple");t&&await M(e,t)}async function q(e,t){try{if((await fetch("/api/templates/change",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:e,templatePath:t})})).ok)alert("Template updated successfully!"),location.reload();else throw new Error("Failed to update template")}catch(a){console.error("Error updating template:",a),alert("Failed to update template. Please try again.")}}async function M(e,t){const a={inputs:e.map(n=>({id:n,templatePath:t}))};try{if((await fetch("/api/pages/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)})).ok)alert("Templates updated successfully!"),location.reload();else throw new Error("Failed to update templates")}catch(n){console.error("Error updating templates:",n),alert("Failed to update templates. Please try again.")}}async function O(){const e=document.querySelectorAll(".page-checkbox:checked"),t=Array.from(e).map(a=>a.getAttribute("data-page-id")).filter(a=>a!==null);if(t.length===0){alert("No pages selected. Please select at least one page.");return}try{const a=await window.openDomainModal("multiple");if(a){const n=await Promise.allSettled(t.map(async s=>{const c=await fetch("/api/domains/change",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:s,domain:a})});if(!c.ok){const o=await c.json();throw new Error(o.message||"Failed to update domain")}return c.json()})),r=n.filter(s=>s.status==="fulfilled").length,l=n.filter(s=>s.status==="rejected").length;alert(l===0?`Successfully updated domain for all ${r} pages!`:`Updated domain for ${r} pages. Failed to update ${l} pages.`),location.reload()}}catch(a){console.error("Error updating domains:",a),alert("An error occurred while updating domains. Please try again.")}}document.querySelectorAll(".change-slug-btn").forEach(e=>{e.addEventListener("click",F)});async function F(e){const t=e.target,a=t.getAttribute("data-page-id"),n=t.getAttribute("data-current-url");if(!a||!n){console.error("Missing page ID or URL");return}const r=[{pageId:a,currentUrl:n}];window.selectedPages=r;const l=document.getElementById("currentUrls");l.value=new URL(n).pathname,document.getElementById("slugModal").showModal();const c=document.getElementById("patternInput");c.value="";const o=document.getElementById("previewUrls");o.value=""}async function R(){const e=document.querySelectorAll(".page-checkbox:checked"),t=Array.from(e).map(o=>{const d=o.getAttribute("data-page-id"),i=o.closest(".page")?.querySelector("p")?.textContent?.replace("URL: ","");return{pageId:d,currentUrl:i}}).filter(o=>o.pageId!==null&&o.currentUrl!==void 0);if(t.length===0){alert("No pages selected. Please select at least one page.");return}window.selectedPages=t;const a=document.getElementById("currentUrls");a.value=t.map(o=>new URL(o.currentUrl).pathname).join(`
`);const n=document.getElementById("slugModal");n.showModal();const r=document.getElementById("patternInput"),l=document.getElementById("previewUrls");r.addEventListener("input",s);function s(){try{const o=r.value,[,d,i]=o.match(/#(.+?)#(.*)/)||[];if(!d||i===void 0){l.value="Invalid pattern format. Use #pattern#replacement";return}const u=new RegExp(d),h=t.map(f=>{const m=new URL(f.currentUrl).pathname;let p=m.replace(u,i);return p=p.replace(/\/+/g,"/").replace(/\/$/,"").replace(/^(?!\/)/,"/"),`${m} → ${p}`});l.value=h.join(`
`)}catch(o){l.value="Invalid regex pattern: "+(o instanceof Error?o.message:"Unknown error")}}document.getElementById("applyChangesBtn")?.addEventListener("click",async()=>{const o=r.value,[,d,i]=o.match(/#(.+?)#(.*)/)||[];if(!d||i===void 0){alert("Invalid pattern format. Please use #pattern#replacement format.");return}try{const u=new RegExp(d),h=await Promise.allSettled(t.map(async p=>{let S=new URL(p.currentUrl).pathname.replace(u,i);S=S.replace(/\/+/g,"/").replace(/\/$/,"").replace(/^\/?/,"/");const k=await fetch("/api/pages/update-slug",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:p.pageId,newSlug:S})});if(!k.ok){const z=await k.json();throw new Error(z.message||"Failed to update slug")}return k.json()})),f=h.filter(p=>p.status==="fulfilled").length,m=h.filter(p=>p.status==="rejected").length;alert(m===0?`Successfully updated slugs for all ${f} pages!`:`Updated slugs for ${f} pages. Failed to update ${m} pages.`),n.close(),location.reload()}catch(u){console.error("Error updating slugs:",u),alert("Invalid regex pattern or error updating slugs. Please try again.")}})}const C=document.getElementById("slugModal"),N=document.querySelectorAll(".pattern-btn"),J=document.querySelectorAll(".close-modal-btn"),x=document.querySelector(".copy-urls-btn"),g=document.getElementById("patternInput"),v=document.getElementById("previewUrls"),V=document.getElementById("applyChangesBtn");g?.addEventListener("input",P),N.forEach(e=>{e.addEventListener("click",()=>{const t=e.getAttribute("data-pattern");t&&g&&(g.value=t,P())})}),J.forEach(e=>{e.addEventListener("click",()=>{C.close()})}),x?.addEventListener("click",()=>{document.getElementById("currentUrls").select(),document.execCommand("copy");const t=x,a=t.textContent||"";t.textContent="Copied!",setTimeout(()=>{t.textContent=a},2e3)}),V?.addEventListener("click",async()=>{const e=g.value,[,t,a]=e.match(/#(.+?)#(.*)/)||[];if(!t||a===void 0){alert("Invalid pattern format. Please use #pattern#replacement format.");return}try{const n=new RegExp(t),r=await Promise.allSettled(window.selectedPages.map(async c=>{let d=new URL(c.currentUrl).pathname.replace(n,a);d=d.replace(/\/+/g,"/").replace(/\/$/,"").replace(/^(?!\/)/,"/");const i=await fetch("/api/pages/update-slug",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pageId:c.pageId,newSlug:d})});if(!i.ok){const u=await i.json();throw new Error(u.message||"Failed to update slug")}return i.json()})),l=r.filter(c=>c.status==="fulfilled").length,s=r.filter(c=>c.status==="rejected").length;alert(s===0?`Successfully updated slugs for all ${l} pages!`:`Updated slugs for ${l} pages. Failed to update ${s} pages.`),C.close(),location.reload()}catch(n){console.error("Error updating slugs:",n),alert("Invalid regex pattern or error updating slugs. Please try again.")}});function P(){try{const e=g.value,[,t,a]=e.match(/#(.+?)#(.*)/)||[];if(!t||a===void 0){v.value="Invalid pattern format. Use #pattern#replacement";return}const n=new RegExp(t),r=window.selectedPages.map(l=>{const s=new URL(l.currentUrl).pathname;let c=s.replace(n,a);return c=c.replace(/\/+/g,"/").replace(/\/$/,"").replace(/^(?!\/)/,"/"),`${s} → ${c}`});v.value=r.join(`
`)}catch(e){v.value="Invalid regex pattern: "+(e instanceof Error?e.message:"Unknown error")}}});
